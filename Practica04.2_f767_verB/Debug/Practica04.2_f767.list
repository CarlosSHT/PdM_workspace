
Practica04.2_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff0  08002ff0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000024  0800301c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800301c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d242  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df4  00000000  00000000  0002d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bcc  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c009  00000000  00000000  00057d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f891e  00000000  00000000  00063d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c643  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002198  00000000  00000000  0015c694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000024 	.word	0x20000024
 8000214:	00000000 	.word	0x00000000
 8000218:	08002fb0 	.word	0x08002fb0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000028 	.word	0x20000028
 8000234:	08002fb0 	.word	0x08002fb0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <debounceFSM_init>:

static delay_t struct_delayDB;
static bool_t flag_falling;


void debounceFSM_init() {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	estadoActual_DB = BUTTON_UP;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <debounceFSM_init+0x14>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	20000040 	.word	0x20000040

08000554 <debounceFSM_update>:

void debounceFSM_update() {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	uint8_t button_value = BSP_PB_GetState(BUTTON_USER) ^ 1; //? 0:1
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f966 	bl	800082c <BSP_PB_GetState>
 8000560:	4603      	mov	r3, r0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f083 0301 	eor.w	r3, r3, #1
 8000568:	71fb      	strb	r3, [r7, #7]
	switch (estadoActual_DB) {
 800056a:	4b29      	ldr	r3, [pc, #164]	; (8000610 <debounceFSM_update+0xbc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b03      	cmp	r3, #3
 8000570:	d846      	bhi.n	8000600 <debounceFSM_update+0xac>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <debounceFSM_update+0x24>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000589 	.word	0x08000589
 800057c:	080005a7 	.word	0x080005a7
 8000580:	080005cb 	.word	0x080005cb
 8000584:	080005e1 	.word	0x080005e1
	case BUTTON_UP:
		if (button_value == 0) {
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d107      	bne.n	800059e <debounceFSM_update+0x4a>
			estadoActual_DB = BUTTON_FALLING;
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <debounceFSM_update+0xbc>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
			delayInit(&struct_delayDB, DELAY_DB);
 8000594:	2128      	movs	r1, #40	; 0x28
 8000596:	481f      	ldr	r0, [pc, #124]	; (8000614 <debounceFSM_update+0xc0>)
 8000598:	f000 f860 	bl	800065c <delayInit>
		} else {
			estadoActual_DB = BUTTON_UP;
		}
		break;
 800059c:	e033      	b.n	8000606 <debounceFSM_update+0xb2>
			estadoActual_DB = BUTTON_UP;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <debounceFSM_update+0xbc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e02f      	b.n	8000606 <debounceFSM_update+0xb2>
	case BUTTON_FALLING:
		if (button_value == 1) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <debounceFSM_update+0x60>
			estadoActual_DB = BUTTON_UP;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <debounceFSM_update+0xbc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e00a      	b.n	80005ca <debounceFSM_update+0x76>
		} else {
			if (delayRead(&struct_delayDB)) {
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <debounceFSM_update+0xc0>)
 80005b6:	f000 f86a 	bl	800068e <delayRead>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <debounceFSM_update+0x76>

				estadoActual_DB = BUTTON_DOWN;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <debounceFSM_update+0xbc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80005c6:	f000 f827 	bl	8000618 <buttonPressed>
			}
		}

	case BUTTON_DOWN:
		if (button_value == 1) {
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d119      	bne.n	8000604 <debounceFSM_update+0xb0>
			estadoActual_DB = BUTTON_RAISING;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <debounceFSM_update+0xbc>)
 80005d2:	2203      	movs	r2, #3
 80005d4:	701a      	strb	r2, [r3, #0]
			delayInit(&struct_delayDB, DELAY_DB);
 80005d6:	2128      	movs	r1, #40	; 0x28
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <debounceFSM_update+0xc0>)
 80005da:	f000 f83f 	bl	800065c <delayInit>
		}
		break;
 80005de:	e011      	b.n	8000604 <debounceFSM_update+0xb0>

	case BUTTON_RAISING:
		if (button_value == 0) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d103      	bne.n	80005ee <debounceFSM_update+0x9a>
			estadoActual_DB = BUTTON_DOWN;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <debounceFSM_update+0xbc>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
				estadoActual_DB = BUTTON_UP;
//					buttonReleased();
			}
		}
	default:
		break;
 80005ec:	e008      	b.n	8000600 <debounceFSM_update+0xac>
			if (delayRead(&struct_delayDB)) {
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <debounceFSM_update+0xc0>)
 80005f0:	f000 f84d 	bl	800068e <delayRead>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <debounceFSM_update+0xac>
				estadoActual_DB = BUTTON_UP;
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <debounceFSM_update+0xbc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
		break;
 8000600:	bf00      	nop
 8000602:	e000      	b.n	8000606 <debounceFSM_update+0xb2>
		break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000040 	.word	0x20000040
 8000614:	20000044 	.word	0x20000044

08000618 <buttonPressed>:

static void buttonPressed() {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	flag_falling = true;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <buttonPressed+0x14>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20000050 	.word	0x20000050

08000630 <readKey>:
//void buttonReleased() {
//	BSP_LED_Toggle(LED3);
//}

bool_t readKey()
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	bool_t aux_flag = flag_falling;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <readKey+0x28>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	if (flag_falling)
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <readKey+0x28>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <readKey+0x1a>
		flag_falling = false;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <readKey+0x28>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
//	flag_falling = flag_falling? 0:1;
	return aux_flag;
 800064a:	79fb      	ldrb	r3, [r7, #7]
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000050 	.word	0x20000050

0800065c <delayInit>:
#include "API_delay.h"

void delayInit(delay_t *delay, tick_t duration) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]

	if (delay == NULL || duration == 0) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <delayInit+0x16>
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <delayInit+0x1a>
		Error_Handler_API_delay();
 8000672:	f000 f855 	bl	8000720 <Error_Handler_API_delay>
	}
	delay->startTime=HAL_GetTick();
 8000676:	f000 f941 	bl	80008fc <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	605a      	str	r2, [r3, #4]
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <delayRead>:

bool_t delayRead(delay_t *delay) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]

	bool flag = false;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]

	if (delay == NULL) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d101      	bne.n	80006a4 <delayRead+0x16>
		Error_Handler_API_delay();
 80006a0:	f000 f83e 	bl	8000720 <Error_Handler_API_delay>
	}

	if(delay->duration == 0)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <delayRead+0x22>
	{
		return flag;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	e01e      	b.n	80006ee <delayRead+0x60>
	}

	if (delay->running) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7a1b      	ldrb	r3, [r3, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d011      	beq.n	80006dc <delayRead+0x4e>
		if (HAL_GetTick() - delay->startTime >= delay->duration) {
 80006b8:	f000 f920 	bl	80008fc <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d30f      	bcc.n	80006ec <delayRead+0x5e>
			flag = true;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
			delay->startTime = HAL_GetTick();
 80006d0:	f000 f914 	bl	80008fc <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	e007      	b.n	80006ec <delayRead+0x5e>
		}

	} else {
		delay->startTime = HAL_GetTick();
 80006dc:	f000 f90e 	bl	80008fc <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	721a      	strb	r2, [r3, #8]
	}
	return flag;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]

	if (delay == NULL) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <delayWrite+0x14>
		Error_Handler_API_delay();
 8000706:	f000 f80b 	bl	8000720 <Error_Handler_API_delay>
	}

	if (delay->running) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a1b      	ldrb	r3, [r3, #8]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <delayWrite+0x22>
		delay->duration = duration;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	605a      	str	r2, [r3, #4]
	}
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Error_Handler_API_delay>:

void Error_Handler_API_delay(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED_RED);
 8000724:	2002      	movs	r0, #2
 8000726:	f000 f84d 	bl	80007c4 <BSP_LED_On>
	while (1) {
 800072a:	e7fe      	b.n	800072a <Error_Handler_API_delay+0xa>

0800072c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10c      	bne.n	8000756 <BSP_LED_Init+0x2a>
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <BSP_LED_Init+0x8c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <BSP_LED_Init+0x8c>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <BSP_LED_Init+0x8c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	e00b      	b.n	800076e <BSP_LED_Init+0x42>
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <BSP_LED_Init+0x8c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <BSP_LED_Init+0x8c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <BSP_LED_Init+0x8c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <BSP_LED_Init+0x90>)
 8000772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <BSP_LED_Init+0x94>)
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	f107 0214 	add.w	r2, r7, #20
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f9a4 	bl	8000ae0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <BSP_LED_Init+0x94>)
 800079c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a06      	ldr	r2, [pc, #24]	; (80007bc <BSP_LED_Init+0x90>)
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	f000 fb5c 	bl	8000e68 <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	08002fc8 	.word	0x08002fc8
 80007c0:	20000000 	.word	0x20000000

080007c4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <BSP_LED_On+0x2c>)
 80007d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <BSP_LED_On+0x30>)
 80007da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f000 fb41 	bl	8000e68 <HAL_GPIO_WritePin>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08002fc8 	.word	0x08002fc8

080007f8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <BSP_LED_Toggle+0x2c>)
 8000806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <BSP_LED_Toggle+0x30>)
 800080e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000812:	4619      	mov	r1, r3
 8000814:	4610      	mov	r0, r2
 8000816:	f000 fb40 	bl	8000e9a <HAL_GPIO_TogglePin>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	08002fc8 	.word	0x08002fc8

0800082c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <BSP_PB_GetState+0x28>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 faf7 	bl	8000e38 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000000c 	.word	0x2000000c

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f90b 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f806 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f002 fa8c 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f917 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b0:	f000 f8ed 	bl	8000a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000020 	.word	0x20000020
 80008cc:	20000014 	.word	0x20000014
 80008d0:	20000010 	.word	0x20000010

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000014 	.word	0x20000014
 80008f8:	20000054 	.word	0x20000054

080008fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000054 	.word	0x20000054

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <__NVIC_SetPriorityGrouping+0x40>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	4313      	orrs	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x40>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00
 8000958:	05fa0000 	.word	0x05fa0000

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a58:	f7ff ff8e 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff47 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff5c 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff8e 	bl	80009cc <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffb0 	bl	8000a34 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
 8000afe:	e175      	b.n	8000dec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b00:	2201      	movs	r2, #1
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f040 8164 	bne.w	8000de6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d005      	beq.n	8000b36 <HAL_GPIO_Init+0x56>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d130      	bne.n	8000b98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68da      	ldr	r2, [r3, #12]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	f003 0201 	and.w	r2, r3, #1
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d017      	beq.n	8000bd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d123      	bne.n	8000c28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3208      	adds	r2, #8
 8000c22:	69b9      	ldr	r1, [r7, #24]
 8000c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0203 	and.w	r2, r3, #3
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80be 	beq.w	8000de6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b66      	ldr	r3, [pc, #408]	; (8000e04 <HAL_GPIO_Init+0x324>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a65      	ldr	r2, [pc, #404]	; (8000e04 <HAL_GPIO_Init+0x324>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b63      	ldr	r3, [pc, #396]	; (8000e04 <HAL_GPIO_Init+0x324>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c82:	4a61      	ldr	r2, [pc, #388]	; (8000e08 <HAL_GPIO_Init+0x328>)
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a58      	ldr	r2, [pc, #352]	; (8000e0c <HAL_GPIO_Init+0x32c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d037      	beq.n	8000d1e <HAL_GPIO_Init+0x23e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <HAL_GPIO_Init+0x330>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d031      	beq.n	8000d1a <HAL_GPIO_Init+0x23a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a56      	ldr	r2, [pc, #344]	; (8000e14 <HAL_GPIO_Init+0x334>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d02b      	beq.n	8000d16 <HAL_GPIO_Init+0x236>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a55      	ldr	r2, [pc, #340]	; (8000e18 <HAL_GPIO_Init+0x338>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d025      	beq.n	8000d12 <HAL_GPIO_Init+0x232>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <HAL_GPIO_Init+0x33c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d01f      	beq.n	8000d0e <HAL_GPIO_Init+0x22e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <HAL_GPIO_Init+0x340>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d019      	beq.n	8000d0a <HAL_GPIO_Init+0x22a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a52      	ldr	r2, [pc, #328]	; (8000e24 <HAL_GPIO_Init+0x344>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0x226>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <HAL_GPIO_Init+0x348>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00d      	beq.n	8000d02 <HAL_GPIO_Init+0x222>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a50      	ldr	r2, [pc, #320]	; (8000e2c <HAL_GPIO_Init+0x34c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <HAL_GPIO_Init+0x21e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <HAL_GPIO_Init+0x350>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_GPIO_Init+0x21a>
 8000cf6:	2309      	movs	r3, #9
 8000cf8:	e012      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	e010      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000cfe:	2308      	movs	r3, #8
 8000d00:	e00e      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d02:	2307      	movs	r3, #7
 8000d04:	e00c      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e00a      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	e008      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d0e:	2304      	movs	r3, #4
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d12:	2303      	movs	r3, #3
 8000d14:	e004      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x240>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	f002 0203 	and.w	r2, r2, #3
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4093      	lsls	r3, r2
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d30:	4935      	ldr	r1, [pc, #212]	; (8000e08 <HAL_GPIO_Init+0x328>)
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d62:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d8c:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_GPIO_Init+0x354>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	f67f ae86 	bls.w	8000b00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40021400 	.word	0x40021400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40021c00 	.word	0x40021c00
 8000e2c:	40022000 	.word	0x40022000
 8000e30:	40022400 	.word	0x40022400
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e001      	b.n	8000e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	041a      	lsls	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	619a      	str	r2, [r3, #24]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	041a      	lsls	r2, r3, #16
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	400b      	ands	r3, r1
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	619a      	str	r2, [r3, #24]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40007000 	.word	0x40007000

08000ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fced 	bl	80008fc <HAL_GetTick>
 8000f22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f24:	e009      	b.n	8000f3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f26:	f7ff fce9 	bl	80008fc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f34:	d901      	bls.n	8000f3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e022      	b.n	8000f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d1ee      	bne.n	8000f26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff fcd2 	bl	80008fc <HAL_GetTick>
 8000f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f5a:	e009      	b.n	8000f70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcce 	bl	80008fc <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f6a:	d901      	bls.n	8000f70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e007      	b.n	8000f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f7c:	d1ee      	bne.n	8000f5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e29b      	b.n	80014de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8087 	beq.w	80010c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb4:	4b96      	ldr	r3, [pc, #600]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00c      	beq.n	8000fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc0:	4b93      	ldr	r3, [pc, #588]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d112      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x62>
 8000fcc:	4b90      	ldr	r3, [pc, #576]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fda:	4b8d      	ldr	r3, [pc, #564]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d06c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x130>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d168      	bne.n	80010c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e275      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x7a>
 8000ffc:	4b84      	ldr	r3, [pc, #528]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a83      	ldr	r2, [pc, #524]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e02e      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x9c>
 8001012:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7e      	ldr	r2, [pc, #504]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7b      	ldr	r2, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e01d      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0xc0>
 8001036:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a75      	ldr	r2, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0xd8>
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fc44 	bl	80008fc <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc40 	bl	80008fc <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e229      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b61      	ldr	r3, [pc, #388]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e014      	b.n	80010c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fc30 	bl	80008fc <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fc2c 	bl	80008fc <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e215      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x110>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d069      	beq.n	80011a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d11c      	bne.n	8001120 <HAL_RCC_OscConfig+0x190>
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x17a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e1e9      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	493d      	ldr	r1, [pc, #244]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e040      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a38      	ldr	r2, [pc, #224]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fbe2 	bl	80008fc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fbde 	bl	80008fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1c7      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4929      	ldr	r1, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fbbe 	bl	80008fc <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fbba 	bl	80008fc <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1a3      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d038      	beq.n	8001220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d019      	beq.n	80011ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb9b 	bl	80008fc <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fb97 	bl	80008fc <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e180      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x23a>
 80011e8:	e01a      	b.n	8001220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_RCC_OscConfig+0x280>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb81 	bl	80008fc <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fb7d 	bl	80008fc <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d903      	bls.n	8001214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e166      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
 8001210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ee      	bne.n	80011fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a4 	beq.w	8001376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a88      	ldr	r2, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b86      	ldr	r3, [pc, #536]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	4b83      	ldr	r3, [pc, #524]	; (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001262:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7f      	ldr	r2, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff fb45 	bl	80008fc <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff fb41 	bl	80008fc <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e12a      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001288:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x4d4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x31a>
 800129c:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a0:	4a6f      	ldr	r2, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6713      	str	r3, [r2, #112]	; 0x70
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x33c>
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b6:	4a6a      	ldr	r2, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	; 0x70
 80012be:	4b68      	ldr	r3, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c2:	4a67      	ldr	r2, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x35e>
 80012d4:	4b62      	ldr	r3, [pc, #392]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	4a61      	ldr	r2, [pc, #388]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6713      	str	r3, [r2, #112]	; 0x70
 80012e0:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x376>
 80012ee:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6713      	str	r3, [r2, #112]	; 0x70
 80012fa:	4b59      	ldr	r3, [pc, #356]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a58      	ldr	r2, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff faf5 	bl	80008fc <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff faf1 	bl	80008fc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0d8      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x386>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fadf 	bl	80008fc <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fadb 	bl	80008fc <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0c2      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a3c      	ldr	r2, [pc, #240]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80ae 	beq.w	80014dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d06d      	beq.n	8001468 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d14b      	bne.n	800142c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800139a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff faac 	bl	80008fc <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff faa8 	bl	80008fc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e091      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	3b01      	subs	r3, #1
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	071b      	lsls	r3, r3, #28
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fa7a 	bl	80008fc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fa76 	bl	80008fc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e05f      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x47c>
 800142a:	e057      	b.n	80014dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fa60 	bl	80008fc <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fa5c 	bl	80008fc <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e045      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x4b0>
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x54c>
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_RCC_OscConfig+0x558>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d129      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d122      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800149e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d119      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10f      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0d0      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 020f 	bic.w	r2, r3, #15
 800151a:	4965      	ldr	r1, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d040      	beq.n	8001610 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d115      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e073      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06b      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ce:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 0203 	bic.w	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4936      	ldr	r1, [pc, #216]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e0:	f7ff f98c 	bl	80008fc <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff f988 	bl	80008fc <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e053      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 020c 	and.w	r2, r3, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d1eb      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d210      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 020f 	bic.w	r2, r3, #15
 8001626:	4922      	ldr	r1, [pc, #136]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1d0>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f8e8 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08002fd0 	.word	0x08002fd0
 80016bc:	20000020 	.word	0x20000020
 80016c0:	20000010 	.word	0x20000010

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b094      	sub	sp, #80	; 0x50
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
 80016d0:	2300      	movs	r3, #0
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d4:	2300      	movs	r3, #0
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80e1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e0db      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016fc:	e0db      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001702:	e0d8      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
 8001724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
 8001732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001736:	4622      	mov	r2, r4
 8001738:	462b      	mov	r3, r5
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4621      	mov	r1, r4
 8001750:	1a51      	subs	r1, r2, r1
 8001752:	6139      	str	r1, [r7, #16]
 8001754:	4629      	mov	r1, r5
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001768:	4659      	mov	r1, fp
 800176a:	018b      	lsls	r3, r1, #6
 800176c:	4651      	mov	r1, sl
 800176e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001772:	4651      	mov	r1, sl
 8001774:	018a      	lsls	r2, r1, #6
 8001776:	4651      	mov	r1, sl
 8001778:	ebb2 0801 	subs.w	r8, r2, r1
 800177c:	4659      	mov	r1, fp
 800177e:	eb63 0901 	sbc.w	r9, r3, r1
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800178e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001796:	4690      	mov	r8, r2
 8001798:	4699      	mov	r9, r3
 800179a:	4623      	mov	r3, r4
 800179c:	eb18 0303 	adds.w	r3, r8, r3
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	462b      	mov	r3, r5
 80017a4:	eb49 0303 	adc.w	r3, r9, r3
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017b6:	4629      	mov	r1, r5
 80017b8:	024b      	lsls	r3, r1, #9
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017c0:	4621      	mov	r1, r4
 80017c2:	024a      	lsls	r2, r1, #9
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ca:	2200      	movs	r2, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017d4:	f7fe fd30 	bl	8000238 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	e058      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	4611      	mov	r1, r2
 80017ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017fc:	4642      	mov	r2, r8
 80017fe:	464b      	mov	r3, r9
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	0159      	lsls	r1, r3, #5
 800180a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180e:	0150      	lsls	r0, r2, #5
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4641      	mov	r1, r8
 8001816:	ebb2 0a01 	subs.w	sl, r2, r1
 800181a:	4649      	mov	r1, r9
 800181c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800182c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001834:	ebb2 040a 	subs.w	r4, r2, sl
 8001838:	eb63 050b 	sbc.w	r5, r3, fp
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	00eb      	lsls	r3, r5, #3
 8001846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184a:	00e2      	lsls	r2, r4, #3
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	4643      	mov	r3, r8
 8001852:	18e3      	adds	r3, r4, r3
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	464b      	mov	r3, r9
 8001858:	eb45 0303 	adc.w	r3, r5, r3
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187e:	2200      	movs	r2, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001888:	f7fe fcd6 	bl	8000238 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80018a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3750      	adds	r7, #80	; 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000020 	.word	0x20000020

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08002fe0 	.word	0x08002fe0

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001914:	f7ff ffdc 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0b5b      	lsrs	r3, r3, #13
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08002fe0 	.word	0x08002fe0

08001938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001960:	4b69      	ldr	r3, [pc, #420]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001966:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800196a:	6093      	str	r3, [r2, #8]
 800196c:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001974:	4964      	ldr	r1, [pc, #400]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d017      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	4959      	ldr	r1, [pc, #356]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b0:	d101      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d017      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	494a      	ldr	r1, [pc, #296]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ec:	d101      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 808b 	beq.w	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a39      	ldr	r2, [pc, #228]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a40:	f7fe ff5c 	bl	80008fc <HAL_GetTick>
 8001a44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7fe ff58 	bl	80008fc <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e38f      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d035      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d02e      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001aa6:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d114      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7fe ff20 	bl	80008fc <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe ff1c 	bl	80008fc <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e351      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ee      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aee:	d111      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001afe:	400b      	ands	r3, r1
 8001b00:	4901      	ldr	r1, [pc, #4]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	0ffffcff 	.word	0x0ffffcff
 8001b14:	4bac      	ldr	r3, [pc, #688]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4aab      	ldr	r2, [pc, #684]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b1e:	6093      	str	r3, [r2, #8]
 8001b20:	4ba9      	ldr	r3, [pc, #676]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	49a6      	ldr	r1, [pc, #664]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d010      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b3e:	4ba2      	ldr	r3, [pc, #648]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b44:	4aa0      	ldr	r2, [pc, #640]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b4e:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b58:	499b      	ldr	r1, [pc, #620]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b6c:	4b96      	ldr	r3, [pc, #600]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b7a:	4993      	ldr	r1, [pc, #588]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b9c:	498a      	ldr	r1, [pc, #552]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bb0:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bbe:	4982      	ldr	r1, [pc, #520]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bd2:	4b7d      	ldr	r3, [pc, #500]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4979      	ldr	r1, [pc, #484]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00a      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bf4:	4b74      	ldr	r3, [pc, #464]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4971      	ldr	r1, [pc, #452]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c16:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	f023 020c 	bic.w	r2, r3, #12
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	4968      	ldr	r1, [pc, #416]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4960      	ldr	r1, [pc, #384]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	4957      	ldr	r1, [pc, #348]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c7c:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	494f      	ldr	r1, [pc, #316]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4946      	ldr	r1, [pc, #280]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	493e      	ldr	r1, [pc, #248]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf0:	4935      	ldr	r1, [pc, #212]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d12:	492d      	ldr	r1, [pc, #180]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d011      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d34:	4924      	ldr	r1, [pc, #144]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d44:	d101      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d74:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d98:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00f      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dbc:	4902      	ldr	r1, [pc, #8]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dc4:	e002      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001dd8:	4b8a      	ldr	r3, [pc, #552]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	4986      	ldr	r1, [pc, #536]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0c:	497d      	ldr	r1, [pc, #500]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d006      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d6 	beq.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e28:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e34:	f7fe fd62 	bl	80008fc <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e3c:	f7fe fd5e 	bl	80008fc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e195      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d021      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11d      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e82:	0e1b      	lsrs	r3, r3, #24
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	019a      	lsls	r2, r3, #6
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	071b      	lsls	r3, r3, #28
 8001ea2:	4958      	ldr	r1, [pc, #352]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02e      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed4:	d129      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ed6:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eea:	0f1b      	lsrs	r3, r3, #28
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	019a      	lsls	r2, r3, #6
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	061b      	lsls	r3, r3, #24
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	071b      	lsls	r3, r3, #28
 8001f0a:	493e      	ldr	r1, [pc, #248]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f18:	f023 021f 	bic.w	r2, r3, #31
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	3b01      	subs	r3, #1
 8001f22:	4938      	ldr	r1, [pc, #224]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01d      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3c:	0e1b      	lsrs	r3, r3, #24
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f4a:	0f1b      	lsrs	r3, r3, #28
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	019a      	lsls	r2, r3, #6
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	071b      	lsls	r3, r3, #28
 8001f6a:	4926      	ldr	r1, [pc, #152]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d011      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	019a      	lsls	r2, r3, #6
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	071b      	lsls	r3, r3, #28
 8001f9a:	491a      	ldr	r1, [pc, #104]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fae:	f7fe fca5 	bl	80008fc <HAL_GetTick>
 8001fb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fb6:	f7fe fca1 	bl	80008fc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b64      	cmp	r3, #100	; 0x64
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0d8      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80ce 	bne.w	8002178 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fc88 	bl	80008fc <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fee:	e00b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ff0:	f7fe fc84 	bl	80008fc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d904      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e0bb      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002014:	d0ec      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002032:	2b00      	cmp	r3, #0
 8002034:	d02e      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12a      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800204c:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	0f1b      	lsrs	r3, r3, #28
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	019a      	lsls	r2, r3, #6
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	071b      	lsls	r3, r3, #28
 8002072:	4944      	ldr	r1, [pc, #272]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800207c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002080:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	493d      	ldr	r1, [pc, #244]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d022      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a8:	d11d      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	0e1b      	lsrs	r3, r3, #24
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	0f1b      	lsrs	r3, r3, #28
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	019a      	lsls	r2, r3, #6
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	071b      	lsls	r3, r3, #28
 80020de:	4929      	ldr	r1, [pc, #164]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d028      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	0e1b      	lsrs	r3, r3, #24
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	019a      	lsls	r2, r3, #6
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	071b      	lsls	r3, r3, #28
 8002126:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	4911      	ldr	r1, [pc, #68]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe fbd4 	bl	80008fc <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002158:	f7fe fbd0 	bl	80008fc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e007      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002176:	d1ef      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e040      	b.n	800221c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fe0e 	bl	8002dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f82c 	bl	8002224 <UART_SetConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e022      	b.n	800221c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa84 	bl	80026ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fb0b 	bl	8002830 <UART_CheckIdleState>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4ba6      	ldr	r3, [pc, #664]	; (80024e8 <UART_SetConfig+0x2c4>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	430b      	orrs	r3, r1
 800225a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a94      	ldr	r2, [pc, #592]	; (80024ec <UART_SetConfig+0x2c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d120      	bne.n	80022e2 <UART_SetConfig+0xbe>
 80022a0:	4b93      	ldr	r3, [pc, #588]	; (80024f0 <UART_SetConfig+0x2cc>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d816      	bhi.n	80022dc <UART_SetConfig+0xb8>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <UART_SetConfig+0x90>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	080022d1 	.word	0x080022d1
 80022bc:	080022cb 	.word	0x080022cb
 80022c0:	080022d7 	.word	0x080022d7
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
 80022c8:	e150      	b.n	800256c <UART_SetConfig+0x348>
 80022ca:	2302      	movs	r3, #2
 80022cc:	77fb      	strb	r3, [r7, #31]
 80022ce:	e14d      	b.n	800256c <UART_SetConfig+0x348>
 80022d0:	2304      	movs	r3, #4
 80022d2:	77fb      	strb	r3, [r7, #31]
 80022d4:	e14a      	b.n	800256c <UART_SetConfig+0x348>
 80022d6:	2308      	movs	r3, #8
 80022d8:	77fb      	strb	r3, [r7, #31]
 80022da:	e147      	b.n	800256c <UART_SetConfig+0x348>
 80022dc:	2310      	movs	r3, #16
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e144      	b.n	800256c <UART_SetConfig+0x348>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <UART_SetConfig+0x2d0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d132      	bne.n	8002352 <UART_SetConfig+0x12e>
 80022ec:	4b80      	ldr	r3, [pc, #512]	; (80024f0 <UART_SetConfig+0x2cc>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d828      	bhi.n	800234c <UART_SetConfig+0x128>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <UART_SetConfig+0xdc>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002335 	.word	0x08002335
 8002304:	0800234d 	.word	0x0800234d
 8002308:	0800234d 	.word	0x0800234d
 800230c:	0800234d 	.word	0x0800234d
 8002310:	08002341 	.word	0x08002341
 8002314:	0800234d 	.word	0x0800234d
 8002318:	0800234d 	.word	0x0800234d
 800231c:	0800234d 	.word	0x0800234d
 8002320:	0800233b 	.word	0x0800233b
 8002324:	0800234d 	.word	0x0800234d
 8002328:	0800234d 	.word	0x0800234d
 800232c:	0800234d 	.word	0x0800234d
 8002330:	08002347 	.word	0x08002347
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	e118      	b.n	800256c <UART_SetConfig+0x348>
 800233a:	2302      	movs	r3, #2
 800233c:	77fb      	strb	r3, [r7, #31]
 800233e:	e115      	b.n	800256c <UART_SetConfig+0x348>
 8002340:	2304      	movs	r3, #4
 8002342:	77fb      	strb	r3, [r7, #31]
 8002344:	e112      	b.n	800256c <UART_SetConfig+0x348>
 8002346:	2308      	movs	r3, #8
 8002348:	77fb      	strb	r3, [r7, #31]
 800234a:	e10f      	b.n	800256c <UART_SetConfig+0x348>
 800234c:	2310      	movs	r3, #16
 800234e:	77fb      	strb	r3, [r7, #31]
 8002350:	e10c      	b.n	800256c <UART_SetConfig+0x348>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <UART_SetConfig+0x2d4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d120      	bne.n	800239e <UART_SetConfig+0x17a>
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <UART_SetConfig+0x2cc>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002366:	2b30      	cmp	r3, #48	; 0x30
 8002368:	d013      	beq.n	8002392 <UART_SetConfig+0x16e>
 800236a:	2b30      	cmp	r3, #48	; 0x30
 800236c:	d814      	bhi.n	8002398 <UART_SetConfig+0x174>
 800236e:	2b20      	cmp	r3, #32
 8002370:	d009      	beq.n	8002386 <UART_SetConfig+0x162>
 8002372:	2b20      	cmp	r3, #32
 8002374:	d810      	bhi.n	8002398 <UART_SetConfig+0x174>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <UART_SetConfig+0x15c>
 800237a:	2b10      	cmp	r3, #16
 800237c:	d006      	beq.n	800238c <UART_SetConfig+0x168>
 800237e:	e00b      	b.n	8002398 <UART_SetConfig+0x174>
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
 8002384:	e0f2      	b.n	800256c <UART_SetConfig+0x348>
 8002386:	2302      	movs	r3, #2
 8002388:	77fb      	strb	r3, [r7, #31]
 800238a:	e0ef      	b.n	800256c <UART_SetConfig+0x348>
 800238c:	2304      	movs	r3, #4
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	e0ec      	b.n	800256c <UART_SetConfig+0x348>
 8002392:	2308      	movs	r3, #8
 8002394:	77fb      	strb	r3, [r7, #31]
 8002396:	e0e9      	b.n	800256c <UART_SetConfig+0x348>
 8002398:	2310      	movs	r3, #16
 800239a:	77fb      	strb	r3, [r7, #31]
 800239c:	e0e6      	b.n	800256c <UART_SetConfig+0x348>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <UART_SetConfig+0x2d8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d120      	bne.n	80023ea <UART_SetConfig+0x1c6>
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <UART_SetConfig+0x2cc>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023b2:	2bc0      	cmp	r3, #192	; 0xc0
 80023b4:	d013      	beq.n	80023de <UART_SetConfig+0x1ba>
 80023b6:	2bc0      	cmp	r3, #192	; 0xc0
 80023b8:	d814      	bhi.n	80023e4 <UART_SetConfig+0x1c0>
 80023ba:	2b80      	cmp	r3, #128	; 0x80
 80023bc:	d009      	beq.n	80023d2 <UART_SetConfig+0x1ae>
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d810      	bhi.n	80023e4 <UART_SetConfig+0x1c0>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x1a8>
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d006      	beq.n	80023d8 <UART_SetConfig+0x1b4>
 80023ca:	e00b      	b.n	80023e4 <UART_SetConfig+0x1c0>
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	e0cc      	b.n	800256c <UART_SetConfig+0x348>
 80023d2:	2302      	movs	r3, #2
 80023d4:	77fb      	strb	r3, [r7, #31]
 80023d6:	e0c9      	b.n	800256c <UART_SetConfig+0x348>
 80023d8:	2304      	movs	r3, #4
 80023da:	77fb      	strb	r3, [r7, #31]
 80023dc:	e0c6      	b.n	800256c <UART_SetConfig+0x348>
 80023de:	2308      	movs	r3, #8
 80023e0:	77fb      	strb	r3, [r7, #31]
 80023e2:	e0c3      	b.n	800256c <UART_SetConfig+0x348>
 80023e4:	2310      	movs	r3, #16
 80023e6:	77fb      	strb	r3, [r7, #31]
 80023e8:	e0c0      	b.n	800256c <UART_SetConfig+0x348>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a44      	ldr	r2, [pc, #272]	; (8002500 <UART_SetConfig+0x2dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d125      	bne.n	8002440 <UART_SetConfig+0x21c>
 80023f4:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <UART_SetConfig+0x2cc>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002402:	d017      	beq.n	8002434 <UART_SetConfig+0x210>
 8002404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002408:	d817      	bhi.n	800243a <UART_SetConfig+0x216>
 800240a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240e:	d00b      	beq.n	8002428 <UART_SetConfig+0x204>
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	d811      	bhi.n	800243a <UART_SetConfig+0x216>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <UART_SetConfig+0x1fe>
 800241a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241e:	d006      	beq.n	800242e <UART_SetConfig+0x20a>
 8002420:	e00b      	b.n	800243a <UART_SetConfig+0x216>
 8002422:	2300      	movs	r3, #0
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e0a1      	b.n	800256c <UART_SetConfig+0x348>
 8002428:	2302      	movs	r3, #2
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	e09e      	b.n	800256c <UART_SetConfig+0x348>
 800242e:	2304      	movs	r3, #4
 8002430:	77fb      	strb	r3, [r7, #31]
 8002432:	e09b      	b.n	800256c <UART_SetConfig+0x348>
 8002434:	2308      	movs	r3, #8
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	e098      	b.n	800256c <UART_SetConfig+0x348>
 800243a:	2310      	movs	r3, #16
 800243c:	77fb      	strb	r3, [r7, #31]
 800243e:	e095      	b.n	800256c <UART_SetConfig+0x348>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <UART_SetConfig+0x2e0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d125      	bne.n	8002496 <UART_SetConfig+0x272>
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <UART_SetConfig+0x2cc>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002458:	d017      	beq.n	800248a <UART_SetConfig+0x266>
 800245a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800245e:	d817      	bhi.n	8002490 <UART_SetConfig+0x26c>
 8002460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002464:	d00b      	beq.n	800247e <UART_SetConfig+0x25a>
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246a:	d811      	bhi.n	8002490 <UART_SetConfig+0x26c>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <UART_SetConfig+0x254>
 8002470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002474:	d006      	beq.n	8002484 <UART_SetConfig+0x260>
 8002476:	e00b      	b.n	8002490 <UART_SetConfig+0x26c>
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e076      	b.n	800256c <UART_SetConfig+0x348>
 800247e:	2302      	movs	r3, #2
 8002480:	77fb      	strb	r3, [r7, #31]
 8002482:	e073      	b.n	800256c <UART_SetConfig+0x348>
 8002484:	2304      	movs	r3, #4
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e070      	b.n	800256c <UART_SetConfig+0x348>
 800248a:	2308      	movs	r3, #8
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	e06d      	b.n	800256c <UART_SetConfig+0x348>
 8002490:	2310      	movs	r3, #16
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e06a      	b.n	800256c <UART_SetConfig+0x348>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <UART_SetConfig+0x2e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d138      	bne.n	8002512 <UART_SetConfig+0x2ee>
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <UART_SetConfig+0x2cc>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024ae:	d017      	beq.n	80024e0 <UART_SetConfig+0x2bc>
 80024b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024b4:	d82a      	bhi.n	800250c <UART_SetConfig+0x2e8>
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ba:	d00b      	beq.n	80024d4 <UART_SetConfig+0x2b0>
 80024bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c0:	d824      	bhi.n	800250c <UART_SetConfig+0x2e8>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <UART_SetConfig+0x2aa>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	d006      	beq.n	80024da <UART_SetConfig+0x2b6>
 80024cc:	e01e      	b.n	800250c <UART_SetConfig+0x2e8>
 80024ce:	2300      	movs	r3, #0
 80024d0:	77fb      	strb	r3, [r7, #31]
 80024d2:	e04b      	b.n	800256c <UART_SetConfig+0x348>
 80024d4:	2302      	movs	r3, #2
 80024d6:	77fb      	strb	r3, [r7, #31]
 80024d8:	e048      	b.n	800256c <UART_SetConfig+0x348>
 80024da:	2304      	movs	r3, #4
 80024dc:	77fb      	strb	r3, [r7, #31]
 80024de:	e045      	b.n	800256c <UART_SetConfig+0x348>
 80024e0:	2308      	movs	r3, #8
 80024e2:	77fb      	strb	r3, [r7, #31]
 80024e4:	e042      	b.n	800256c <UART_SetConfig+0x348>
 80024e6:	bf00      	nop
 80024e8:	efff69f3 	.word	0xefff69f3
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40004800 	.word	0x40004800
 80024fc:	40004c00 	.word	0x40004c00
 8002500:	40005000 	.word	0x40005000
 8002504:	40011400 	.word	0x40011400
 8002508:	40007800 	.word	0x40007800
 800250c:	2310      	movs	r3, #16
 800250e:	77fb      	strb	r3, [r7, #31]
 8002510:	e02c      	b.n	800256c <UART_SetConfig+0x348>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <UART_SetConfig+0x4bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d125      	bne.n	8002568 <UART_SetConfig+0x344>
 800251c:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <UART_SetConfig+0x4c0>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002526:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800252a:	d017      	beq.n	800255c <UART_SetConfig+0x338>
 800252c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002530:	d817      	bhi.n	8002562 <UART_SetConfig+0x33e>
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002536:	d00b      	beq.n	8002550 <UART_SetConfig+0x32c>
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d811      	bhi.n	8002562 <UART_SetConfig+0x33e>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <UART_SetConfig+0x326>
 8002542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002546:	d006      	beq.n	8002556 <UART_SetConfig+0x332>
 8002548:	e00b      	b.n	8002562 <UART_SetConfig+0x33e>
 800254a:	2300      	movs	r3, #0
 800254c:	77fb      	strb	r3, [r7, #31]
 800254e:	e00d      	b.n	800256c <UART_SetConfig+0x348>
 8002550:	2302      	movs	r3, #2
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e00a      	b.n	800256c <UART_SetConfig+0x348>
 8002556:	2304      	movs	r3, #4
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e007      	b.n	800256c <UART_SetConfig+0x348>
 800255c:	2308      	movs	r3, #8
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e004      	b.n	800256c <UART_SetConfig+0x348>
 8002562:	2310      	movs	r3, #16
 8002564:	77fb      	strb	r3, [r7, #31]
 8002566:	e001      	b.n	800256c <UART_SetConfig+0x348>
 8002568:	2310      	movs	r3, #16
 800256a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002574:	d15b      	bne.n	800262e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d828      	bhi.n	80025ce <UART_SetConfig+0x3aa>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <UART_SetConfig+0x360>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025a9 	.word	0x080025a9
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025b9 	.word	0x080025b9
 8002590:	080025cf 	.word	0x080025cf
 8002594:	080025bf 	.word	0x080025bf
 8002598:	080025cf 	.word	0x080025cf
 800259c:	080025cf 	.word	0x080025cf
 80025a0:	080025cf 	.word	0x080025cf
 80025a4:	080025c7 	.word	0x080025c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a8:	f7ff f99e 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80025ac:	61b8      	str	r0, [r7, #24]
        break;
 80025ae:	e013      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025b0:	f7ff f9ae 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80025b4:	61b8      	str	r0, [r7, #24]
        break;
 80025b6:	e00f      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <UART_SetConfig+0x4c4>)
 80025ba:	61bb      	str	r3, [r7, #24]
        break;
 80025bc:	e00c      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025be:	f7ff f881 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 80025c2:	61b8      	str	r0, [r7, #24]
        break;
 80025c4:	e008      	b.n	80025d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ca:	61bb      	str	r3, [r7, #24]
        break;
 80025cc:	e004      	b.n	80025d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	77bb      	strb	r3, [r7, #30]
        break;
 80025d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d074      	beq.n	80026c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	d916      	bls.n	8002628 <UART_SetConfig+0x404>
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d212      	bcs.n	8002628 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	b29a      	uxth	r2, r3
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	4313      	orrs	r3, r2
 800261c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	89fa      	ldrh	r2, [r7, #14]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	e04f      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	77bb      	strb	r3, [r7, #30]
 800262c:	e04c      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d828      	bhi.n	8002686 <UART_SetConfig+0x462>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <UART_SetConfig+0x418>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002661 	.word	0x08002661
 8002640:	08002669 	.word	0x08002669
 8002644:	08002671 	.word	0x08002671
 8002648:	08002687 	.word	0x08002687
 800264c:	08002677 	.word	0x08002677
 8002650:	08002687 	.word	0x08002687
 8002654:	08002687 	.word	0x08002687
 8002658:	08002687 	.word	0x08002687
 800265c:	0800267f 	.word	0x0800267f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002660:	f7ff f942 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002664:	61b8      	str	r0, [r7, #24]
        break;
 8002666:	e013      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff f952 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 800266c:	61b8      	str	r0, [r7, #24]
        break;
 800266e:	e00f      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <UART_SetConfig+0x4c4>)
 8002672:	61bb      	str	r3, [r7, #24]
        break;
 8002674:	e00c      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002676:	f7ff f825 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 800267a:	61b8      	str	r0, [r7, #24]
        break;
 800267c:	e008      	b.n	8002690 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800267e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002682:	61bb      	str	r3, [r7, #24]
        break;
 8002684:	e004      	b.n	8002690 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	77bb      	strb	r3, [r7, #30]
        break;
 800268e:	bf00      	nop
    }

    if (pclk != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	085a      	lsrs	r2, r3, #1
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d909      	bls.n	80026c4 <UART_SetConfig+0x4a0>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d205      	bcs.n	80026c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	e001      	b.n	80026c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40007c00 	.word	0x40007c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400

080026ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01a      	beq.n	8002802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ea:	d10a      	bne.n	8002802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  }
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002840:	f7fe f85c 	bl	80008fc <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d10e      	bne.n	8002872 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f82d 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e023      	b.n	80028ba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d10e      	bne.n	800289e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f817 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e00d      	b.n	80028ba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b09c      	sub	sp, #112	; 0x70
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d2:	e0a5      	b.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028da:	f000 80a1 	beq.w	8002a20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe f80d 	bl	80008fc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80028ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13e      	bne.n	8002972 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002908:	667b      	str	r3, [r7, #100]	; 0x64
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002914:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e6      	bne.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3308      	adds	r3, #8
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3308      	adds	r3, #8
 8002944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002946:	64ba      	str	r2, [r7, #72]	; 0x48
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e067      	b.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d04f      	beq.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298e:	d147      	bne.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	e853 3f00 	ldrex	r3, [r3]
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e6      	bne.n	800299a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3308      	adds	r3, #8
 80029d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	613b      	str	r3, [r7, #16]
   return(result);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3308      	adds	r3, #8
 80029ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029ec:	623a      	str	r2, [r7, #32]
 80029ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	69f9      	ldr	r1, [r7, #28]
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e010      	b.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f43f af4a 	beq.w	80028d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3770      	adds	r7, #112	; 0x70
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a50:	f7fd ff02 	bl	8000858 <HAL_Init>

	/* USER CODE BEGIN Init */

	BSP_LED_Init(LED1);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd fe69 	bl	800072c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f7fd fe66 	bl	800072c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fd fe63 	bl	800072c <BSP_LED_Init>
	//BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);//
	selected_delay = 0;
 8002a66:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <main+0x98>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a6c:	f000 f840 	bl	8002af0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a70:	f000 f8e0 	bl	8002c34 <MX_GPIO_Init>
//  MX_ETH_Init();
	MX_USART3_UART_Init();
 8002a74:	f000 f8ae 	bl	8002bd4 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
	/* USER CODE BEGIN 2 */
	debounceFSM_init();
 8002a78:	f7fd fd60 	bl	800053c <debounceFSM_init>
	delayInit(&delay_toogles, list_delays[selected_delay]);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <main+0x98>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <main+0x9c>)
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4818      	ldr	r0, [pc, #96]	; (8002aec <main+0xa0>)
 8002a8c:	f7fd fde6 	bl	800065c <delayInit>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		debounceFSM_update();
 8002a90:	f7fd fd60 	bl	8000554 <debounceFSM_update>


		if (readKey()) {
 8002a94:	f7fd fdcc 	bl	8000630 <readKey>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <main+0x82>
			selected_delay++;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <main+0x98>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <main+0x98>)
 8002aa8:	701a      	strb	r2, [r3, #0]
			if (selected_delay > DELAYS_COUNT - 1) {
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <main+0x98>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d802      	bhi.n	8002aba <main+0x6e>
				selected_delay = 0;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <main+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
			}
			delayWrite(&delay_toogles, list_delays[selected_delay]);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <main+0x98>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <main+0x9c>)
 8002ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4808      	ldr	r0, [pc, #32]	; (8002aec <main+0xa0>)
 8002aca:	f7fd fe14 	bl	80006f6 <delayWrite>
		}

		if (delayRead(&delay_toogles)) {
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <main+0xa0>)
 8002ad0:	f7fd fddd 	bl	800068e <delayRead>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0da      	beq.n	8002a90 <main+0x44>
			BSP_LED_Toggle(LED2);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fd fe8c 	bl	80007f8 <BSP_LED_Toggle>
		debounceFSM_update();
 8002ae0:	e7d6      	b.n	8002a90 <main+0x44>
 8002ae2:	bf00      	nop
 8002ae4:	200000e8 	.word	0x200000e8
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	200000dc 	.word	0x200000dc

08002af0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b094      	sub	sp, #80	; 0x50
 8002af4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	2234      	movs	r2, #52	; 0x34
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa4e 	bl	8002fa0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002b14:	f7fe f9dc 	bl	8000ed0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <SystemClock_Config+0xdc>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <SystemClock_Config+0xdc>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6413      	str	r3, [r2, #64]	; 0x40
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <SystemClock_Config+0xdc>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <SystemClock_Config+0xe0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <SystemClock_Config+0xe0>)
 8002b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <SystemClock_Config+0xe0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b54:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b56:	2302      	movs	r3, #2
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002b60:	2304      	movs	r3, #4
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8002b64:	2360      	movs	r3, #96	; 0x60
 8002b66:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fa09 	bl	8000f90 <HAL_RCC_OscConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0x98>
		Error_Handler();
 8002b84:	f000 f8f8 	bl	8002d78 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002b88:	f7fe f9b2 	bl	8000ef0 <HAL_PWREx_EnableOverDrive>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <SystemClock_Config+0xa6>
		Error_Handler();
 8002b92:	f000 f8f1 	bl	8002d78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b96:	230f      	movs	r3, #15
 8002b98:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fc9a 	bl	80014ec <HAL_RCC_ClockConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0xd2>
		Error_Handler();
 8002bbe:	f000 f8db 	bl	8002d78 <Error_Handler>
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3750      	adds	r7, #80	; 0x50
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <MX_USART3_UART_Init+0x5c>)
 8002bdc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002be4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002c16:	4805      	ldr	r0, [pc, #20]	; (8002c2c <MX_USART3_UART_Init+0x58>)
 8002c18:	f7ff fab6 	bl	8002188 <HAL_UART_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8002c22:	f000 f8a9 	bl	8002d78 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000058 	.word	0x20000058
 8002c30:	40004800 	.word	0x40004800

08002c34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <MX_GPIO_Init+0x134>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f244 0181 	movw	r1, #16513	; 0x4081
 8002ce0:	4822      	ldr	r0, [pc, #136]	; (8002d6c <MX_GPIO_Init+0x138>)
 8002ce2:	f7fe f8c1 	bl	8000e68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	4821      	ldr	r0, [pc, #132]	; (8002d70 <MX_GPIO_Init+0x13c>)
 8002cec:	f7fe f8bc 	bl	8000e68 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cfa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	481b      	ldr	r0, [pc, #108]	; (8002d74 <MX_GPIO_Init+0x140>)
 8002d08:	f7fd feea 	bl	8000ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8002d0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	4619      	mov	r1, r3
 8002d24:	4811      	ldr	r0, [pc, #68]	; (8002d6c <MX_GPIO_Init+0x138>)
 8002d26:	f7fd fedb 	bl	8000ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d2a:	2340      	movs	r3, #64	; 0x40
 8002d2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <MX_GPIO_Init+0x13c>)
 8002d42:	f7fd fecd 	bl	8000ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d52:	f107 031c 	add.w	r3, r7, #28
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_GPIO_Init+0x13c>)
 8002d5a:	f7fd fec1 	bl	8000ae0 <HAL_GPIO_Init>

}
 8002d5e:	bf00      	nop
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40021800 	.word	0x40021800
 8002d74:	40020800 	.word	0x40020800

08002d78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7c:	b672      	cpsid	i
}
 8002d7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d80:	e7fe      	b.n	8002d80 <Error_Handler+0x8>
	...

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_MspInit+0x44>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_MspInit+0x44>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_MspInit+0x44>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0ae      	sub	sp, #184	; 0xb8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2290      	movs	r2, #144	; 0x90
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f8d7 	bl	8002fa0 <memset>
  if(huart->Instance==USART3)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_UART_MspInit+0xb4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d13c      	bne.n	8002e76 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fd94 	bl	8001938 <HAL_RCCEx_PeriphCLKConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e16:	f7ff ffaf 	bl	8002d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_UART_MspInit+0xb8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e64:	2307      	movs	r3, #7
 8002e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_UART_MspInit+0xbc>)
 8002e72:	f7fd fe35 	bl	8000ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e76:	bf00      	nop
 8002e78:	37b8      	adds	r7, #184	; 0xb8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40004800 	.word	0x40004800
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020c00 	.word	0x40020c00

08002e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <NMI_Handler+0x4>

08002e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <HardFault_Handler+0x4>

08002e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <MemManage_Handler+0x4>

08002e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <BusFault_Handler+0x4>

08002ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler+0x4>

08002eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed8:	f7fd fcfc 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <SystemInit+0x20>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <SystemInit+0x20>)
 8002eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f0a:	490e      	ldr	r1, [pc, #56]	; (8002f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f10:	e002      	b.n	8002f18 <LoopCopyDataInit>

08002f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f16:	3304      	adds	r3, #4

08002f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f1c:	d3f9      	bcc.n	8002f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f20:	4c0b      	ldr	r4, [pc, #44]	; (8002f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f24:	e001      	b.n	8002f2a <LoopFillZerobss>

08002f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f28:	3204      	adds	r2, #4

08002f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f2c:	d3fb      	bcc.n	8002f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f2e:	f7ff ffd7 	bl	8002ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f32:	f000 f811 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f36:	f7ff fd89 	bl	8002a4c <main>
  bx  lr    
 8002f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002f48:	08002ff8 	.word	0x08002ff8
  ldr r2, =_sbss
 8002f4c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002f50:	200000ec 	.word	0x200000ec

08002f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC_IRQHandler>
	...

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	4d0d      	ldr	r5, [pc, #52]	; (8002f90 <__libc_init_array+0x38>)
 8002f5c:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f5e:	1b64      	subs	r4, r4, r5
 8002f60:	10a4      	asrs	r4, r4, #2
 8002f62:	2600      	movs	r6, #0
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	4d0b      	ldr	r5, [pc, #44]	; (8002f98 <__libc_init_array+0x40>)
 8002f6a:	4c0c      	ldr	r4, [pc, #48]	; (8002f9c <__libc_init_array+0x44>)
 8002f6c:	f000 f820 	bl	8002fb0 <_init>
 8002f70:	1b64      	subs	r4, r4, r5
 8002f72:	10a4      	asrs	r4, r4, #2
 8002f74:	2600      	movs	r6, #0
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08002ff0 	.word	0x08002ff0
 8002f94:	08002ff0 	.word	0x08002ff0
 8002f98:	08002ff0 	.word	0x08002ff0
 8002f9c:	08002ff4 	.word	0x08002ff4

08002fa0 <memset>:
 8002fa0:	4402      	add	r2, r0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
