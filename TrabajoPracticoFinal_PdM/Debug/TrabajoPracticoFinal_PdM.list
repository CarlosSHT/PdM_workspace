
TrabajoPracticoFinal_PdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000908  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d249  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239a  00000000  00000000  0002d305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ff1  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e06  00000000  00000000  00057c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e354d  00000000  00000000  0006ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014efa4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000302c  00000000  00000000  0014eff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b54 	.word	0x08004b54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08004b54 	.word	0x08004b54

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debounceFSM_init>:

static void buttonPressed();			// debe togglear el LED1
static void buttonReleased();		// debe togglear el LED3

// Inicialización del debounce
void debounceFSM_init() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	delayInit(&struct_delayDB, DELAY_DB); 		// Inicializa delay 40 ms
 80005b8:	2128      	movs	r1, #40	; 0x28
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <debounceFSM_init+0x20>)
 80005bc:	f000 f8b4 	bl	8000728 <delayInit>

	estadoActual_DB = BUTTON_UP;				// Estado de maquina inicial BUTTON UP
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <debounceFSM_init+0x24>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]

	BSP_PB_Init(BUTTON_UP, BUTTON_MODE_GPIO);	// Inicialización del boton de usuario
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fc79 	bl	8000ec0 <BSP_PB_Init>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000ac 	.word	0x200000ac
 80005d8:	200000a8 	.word	0x200000a8

080005dc <debounceFSM_update>:

void debounceFSM_update() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t button_value = BSP_PB_GetState(BUTTON_USER) ^ 1; //? 0:1
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fcc2 	bl	8000f6c <BSP_PB_GetState>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
	switch (estadoActual_DB) {
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <debounceFSM_update+0xe0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d844      	bhi.n	8000684 <debounceFSM_update+0xa8>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <debounceFSM_update+0x24>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000611 	.word	0x08000611
 8000604:	08000625 	.word	0x08000625
 8000608:	0800064b 	.word	0x0800064b
 800060c:	0800065f 	.word	0x0800065f
	case BUTTON_UP:									// Estado de maquina boton sin presionar
		if (button_value == 0) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d146      	bne.n	80006a4 <debounceFSM_update+0xc8>
			estadoActual_DB = BUTTON_FALLING;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <debounceFSM_update+0xe0>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
//			delayInit(&struct_delayDB, DELAY_DB);
			delayRead(&struct_delayDB);
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <debounceFSM_update+0xe4>)
 800061e:	f000 f89a 	bl	8000756 <delayRead>
		}
		break;
 8000622:	e03f      	b.n	80006a4 <debounceFSM_update+0xc8>

	case BUTTON_FALLING:							// Estado de maquina rebote bajada
		if (button_value == 1) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d103      	bne.n	8000632 <debounceFSM_update+0x56>
			estadoActual_DB = BUTTON_UP;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <debounceFSM_update+0xe0>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
			if (delayRead(&struct_delayDB)) {		// Verifica antirebote por 40ms
				estadoActual_DB = BUTTON_DOWN;
				buttonPressed();
			}
		}
		break;
 8000630:	e03a      	b.n	80006a8 <debounceFSM_update+0xcc>
			if (delayRead(&struct_delayDB)) {		// Verifica antirebote por 40ms
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <debounceFSM_update+0xe4>)
 8000634:	f000 f88f 	bl	8000756 <delayRead>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d034      	beq.n	80006a8 <debounceFSM_update+0xcc>
				estadoActual_DB = BUTTON_DOWN;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <debounceFSM_update+0xe0>)
 8000640:	2202      	movs	r2, #2
 8000642:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000644:	f000 f842 	bl	80006cc <buttonPressed>
		break;
 8000648:	e02e      	b.n	80006a8 <debounceFSM_update+0xcc>

	case BUTTON_DOWN:								// Estado de maquina boton presionado
		if (button_value == 1) {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d12d      	bne.n	80006ac <debounceFSM_update+0xd0>
			estadoActual_DB = BUTTON_RAISING;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <debounceFSM_update+0xe0>)
 8000652:	2203      	movs	r2, #3
 8000654:	701a      	strb	r2, [r3, #0]
			delayRead(&struct_delayDB);
 8000656:	481a      	ldr	r0, [pc, #104]	; (80006c0 <debounceFSM_update+0xe4>)
 8000658:	f000 f87d 	bl	8000756 <delayRead>
//			delayInit(&struct_delayDB, DELAY_DB);
		}
		break;
 800065c:	e026      	b.n	80006ac <debounceFSM_update+0xd0>

	case BUTTON_RAISING:							// Estado de maquina rebote subida
		if (button_value == 0) {
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <debounceFSM_update+0x90>
			estadoActual_DB = BUTTON_DOWN;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <debounceFSM_update+0xe0>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
			if (delayRead(&struct_delayDB)) {		// Verifica antirebote por 40ms
				estadoActual_DB = BUTTON_UP;
				buttonReleased();
			}
		}
		break;
 800066a:	e021      	b.n	80006b0 <debounceFSM_update+0xd4>
			if (delayRead(&struct_delayDB)) {		// Verifica antirebote por 40ms
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <debounceFSM_update+0xe4>)
 800066e:	f000 f872 	bl	8000756 <delayRead>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d01b      	beq.n	80006b0 <debounceFSM_update+0xd4>
				estadoActual_DB = BUTTON_UP;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <debounceFSM_update+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 800067e:	f000 f831 	bl	80006e4 <buttonReleased>
		break;
 8000682:	e015      	b.n	80006b0 <debounceFSM_update+0xd4>

	default:
		estadoActual_DB = BUTTON_UP;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <debounceFSM_update+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
		BSP_LED_Off(LED1);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fbfe 	bl	8000e8c <BSP_LED_Off>
		BSP_LED_Off(LED1);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fbfb 	bl	8000e8c <BSP_LED_Off>
		flag_falling = false;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <debounceFSM_update+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
		flag_rising = false;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <debounceFSM_update+0xec>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		break;
 80006a2:	e006      	b.n	80006b2 <debounceFSM_update+0xd6>
		break;
 80006a4:	bf00      	nop
 80006a6:	e004      	b.n	80006b2 <debounceFSM_update+0xd6>
		break;
 80006a8:	bf00      	nop
 80006aa:	e002      	b.n	80006b2 <debounceFSM_update+0xd6>
		break;
 80006ac:	bf00      	nop
 80006ae:	e000      	b.n	80006b2 <debounceFSM_update+0xd6>
		break;
 80006b0:	bf00      	nop
	}
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000a8 	.word	0x200000a8
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	200000b8 	.word	0x200000b8
 80006c8:	200000b9 	.word	0x200000b9

080006cc <buttonPressed>:

static void buttonPressed() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	flag_falling = true;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <buttonPressed+0x14>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
//	BSP_LED_Toggle(LED1);
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	200000b8 	.word	0x200000b8

080006e4 <buttonReleased>:

static void buttonReleased() {
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	flag_rising = true;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <buttonReleased+0x14>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
//	BSP_LED_Toggle(LED3);
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	200000b9 	.word	0x200000b9

080006fc <readKey>:

// Función verificación flanco bajada
bool_t readKey() {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	bool_t aux_flag = flag_falling;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <readKey+0x28>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
	if (flag_falling)
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <readKey+0x28>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <readKey+0x1a>
		flag_falling = false;
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <readKey+0x28>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
//	flag_falling = flag_falling? 0:1;
	return aux_flag;
 8000716:	79fb      	ldrb	r3, [r7, #7]
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	200000b8 	.word	0x200000b8

08000728 <delayInit>:
#include "API_delay.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_nucleo_144.h"


void delayInit(delay_t *delay, tick_t duration) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]

	// Verifica que las entradas sean correctas
	if (delay == NULL || duration == 0) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <delayInit+0x16>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <delayInit+0x1a>
		Error_Handler_API_delay();
 800073e:	f000 f841 	bl	80007c4 <Error_Handler_API_delay>
	}
//	delay->startTime=HAL_GetTick();
	delay->running=false;	// se inicializa estado apagado
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	721a      	strb	r2, [r3, #8]
	delay->duration = duration; // se actualiza la duración distinto a cero
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	605a      	str	r2, [r3, #4]
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <delayRead>:

// delay no bloqueante de un solo tiro
bool_t delayRead(delay_t *delay) {
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]

	bool_t flag = false;
 800075e:	2300      	movs	r3, #0
 8000760:	73fb      	strb	r3, [r7, #15]

	// Verifica delay no sea nulo
	if (delay == NULL) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <delayRead+0x16>
		Error_Handler_API_delay();
 8000768:	f000 f82c 	bl	80007c4 <Error_Handler_API_delay>
	}

	// Si duración del delay es 0 devuelve falso
	if (delay->duration == 0) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <delayRead+0x22>
		return flag;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	e021      	b.n	80007bc <delayRead+0x66>
	}


	if (!delay->running) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7a1b      	ldrb	r3, [r3, #8]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00a      	beq.n	800079c <delayRead+0x46>
		delay->startTime = HAL_GetTick(); 	// establece tiempo de inicio
 8000786:	f000 fd01 	bl	800118c <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
		delay->running = true;				// establece delay en funcionamiento
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	721a      	strb	r2, [r3, #8]
		flag=false;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	e00e      	b.n	80007ba <delayRead+0x64>
	}
	else {
		if (HAL_GetTick() - delay->startTime >= delay->duration) { // intervalo completado?
 800079c:	f000 fcf6 	bl	800118c <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d304      	bcc.n	80007ba <delayRead+0x64>
			delay->running = false;			// se apaga el delay
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	721a      	strb	r2, [r3, #8]
			flag = true;					// se devuelve que ocurrió un delay
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
//			delay->startTime = HAL_GetTick();
		}
	}
	return flag;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Error_Handler_API_delay>:
	if (delay->running) {
		delay->duration = duration;
	}
}

void Error_Handler_API_delay(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED_RED);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 fb45 	bl	8000e58 <BSP_LED_On>
	while (1) {
 80007ce:	e7fe      	b.n	80007ce <Error_Handler_API_delay+0xa>

080007d0 <gpiosinit>:
#define PG3_PIN                                GPIO_PIN_3
#define PG3_GPIO_PORT                          GPIOG
#define PG3_GPIO_CLK_ENABLE()                  __HAL_RCC_GPIOG_CLK_ENABLE()
#define PG3_GPIO_CLK_DISABLE()                 __HAL_RCC_GPIOG_CLK_DISABLE()

bool_t gpiosinit() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	PG2_GPIO_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <gpiosinit+0x94>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <gpiosinit+0x94>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <gpiosinit+0x94>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = PG2_PIN;
 80007f2:	2304      	movs	r3, #4
 80007f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(PG2_GPIO_PORT, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <gpiosinit+0x98>)
 800080a:	f000 fe01 	bl	8001410 <HAL_GPIO_Init>

	PG3_GPIO_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <gpiosinit+0x94>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <gpiosinit+0x94>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <gpiosinit+0x94>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = PG3_PIN;
 800082a:	2308      	movs	r3, #8
 800082c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(PG3_GPIO_PORT, &GPIO_InitStruct);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <gpiosinit+0x98>)
 8000842:	f000 fde5 	bl	8001410 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(PG2_GPIO_PORT, PG2_PIN, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2104      	movs	r1, #4
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <gpiosinit+0x98>)
 800084c:	f000 ffa4 	bl	8001798 <HAL_GPIO_WritePin>

	//!<Set high value G3 for activate I2C MODE in ADXL345
	HAL_GPIO_WritePin(PG3_GPIO_PORT, PG3_PIN, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2108      	movs	r1, #8
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <gpiosinit+0x98>)
 8000856:	f000 ff9f 	bl	8001798 <HAL_GPIO_WritePin>

	return true;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40021800 	.word	0x40021800

0800086c <BSP_LEDs_On>:




void BSP_LEDs_On(bool_t led1, bool_t led2, bool_t led3)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	717b      	strb	r3, [r7, #5]
	led1? BSP_LED_On(LED1): BSP_LED_Off(LED1);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <BSP_LEDs_On+0x20>
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fae7 	bl	8000e58 <BSP_LED_On>
 800088a:	e002      	b.n	8000892 <BSP_LEDs_On+0x26>
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fafd 	bl	8000e8c <BSP_LED_Off>
	led2? BSP_LED_On(LED2): BSP_LED_Off(LED2);
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <BSP_LEDs_On+0x34>
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fadd 	bl	8000e58 <BSP_LED_On>
 800089e:	e002      	b.n	80008a6 <BSP_LEDs_On+0x3a>
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 faf3 	bl	8000e8c <BSP_LED_Off>
	led3? BSP_LED_On(LED3): BSP_LED_Off(LED3);
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <BSP_LEDs_On+0x48>
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 fad3 	bl	8000e58 <BSP_LED_On>
//	if (led2) BSP_LED_On(LED2) else BSP_LED_Off(LED2);
//	if (led3) BSP_LED_On(LED3) else BSP_LED_Off(LED3);
}
 80008b2:	e002      	b.n	80008ba <BSP_LEDs_On+0x4e>
	led3? BSP_LED_On(LED3): BSP_LED_Off(LED3);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fae9 	bl	8000e8c <BSP_LED_Off>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <i2cinit>:

#define	i2c_TIMEOUT	200				//!< Timeout I2C in miliseconds

I2C_HandleTypeDef I2CApiHandle;		//!< Instance Handle I2C

bool_t i2cinit() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

	bool_t init_flag = false;
 80008ca:	2300      	movs	r3, #0
 80008cc:	77fb      	strb	r3, [r7, #31]

	GPIO_InitTypeDef GPIO_InitStruct;

	/* I2C1 clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <i2cinit+0xb8>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a29      	ldr	r2, [pc, #164]	; (800097c <i2cinit+0xb8>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <i2cinit+0xb8>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <i2cinit+0xb8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a22      	ldr	r2, [pc, #136]	; (800097c <i2cinit+0xb8>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <i2cinit+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090c:	2312      	movs	r3, #18
 800090e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000918:	2304      	movs	r3, #4
 800091a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4619      	mov	r1, r3
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <i2cinit+0xbc>)
 8000924:	f000 fd74 	bl	8001410 <HAL_GPIO_Init>

	I2CApiHandle.Instance = I2C1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <i2cinit+0xc0>)
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <i2cinit+0xc4>)
 800092c:	601a      	str	r2, [r3, #0]
	I2CApiHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <i2cinit+0xc0>)
 8000930:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000934:	611a      	str	r2, [r3, #16]
	I2CApiHandle.Init.ClockSpeed = 100000;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <i2cinit+0xc0>)
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <i2cinit+0xc8>)
 800093a:	605a      	str	r2, [r3, #4]
	I2CApiHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <i2cinit+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
	I2CApiHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <i2cinit+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
	I2CApiHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <i2cinit+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
	I2CApiHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <i2cinit+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
	I2CApiHandle.Init.OwnAddress1 = 0;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <i2cinit+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
	I2CApiHandle.Init.OwnAddress2 = 0;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <i2cinit+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]

	if (HAL_I2C_Init(&I2CApiHandle) == HAL_OK)
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <i2cinit+0xc0>)
 8000962:	f000 ff33 	bl	80017cc <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <i2cinit+0xac>
		init_flag = true;
 800096c:	2301      	movs	r3, #1
 800096e:	77fb      	strb	r3, [r7, #31]

	return init_flag;
 8000970:	7ffb      	ldrb	r3, [r7, #31]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	200000bc 	.word	0x200000bc
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <i2c_checkDevice>:

bool_t i2c_checkDevice(uint16_t ApiDevAddress) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
	bool_t devAvailable = false;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef returnflag;
	returnflag = HAL_I2C_IsDeviceReady(&I2CApiHandle, ApiDevAddress, 2,
 800099e:	88f9      	ldrh	r1, [r7, #6]
 80009a0:	23c8      	movs	r3, #200	; 0xc8
 80009a2:	2202      	movs	r2, #2
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <i2c_checkDevice+0x34>)
 80009a6:	f001 fb7f 	bl	80020a8 <HAL_I2C_IsDeviceReady>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73bb      	strb	r3, [r7, #14]
	i2c_TIMEOUT);
	if (returnflag == HAL_OK) {
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <i2c_checkDevice+0x28>
		devAvailable = true;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
	}

	return devAvailable;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000bc 	.word	0x200000bc

080009c8 <i2c_masterRead>:

void i2c_masterRead(uint8_t dev_address, uint8_t reg_address,
		uint8_t *val_pData, uint8_t n_bytes) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	603a      	str	r2, [r7, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	460b      	mov	r3, r1
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	4613      	mov	r3, r2
 80009dc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&I2CApiHandle, (uint16_t) dev_address,
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	b299      	uxth	r1, r3
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	797b      	ldrb	r3, [r7, #5]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	20c8      	movs	r0, #200	; 0xc8
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <i2c_masterRead+0x3c>)
 80009f8:	f001 f930 	bl	8001c5c <HAL_I2C_Mem_Read>
			(uint8_t) reg_address, I2C_MEMADD_SIZE_8BIT, val_pData, n_bytes,
			i2c_TIMEOUT);

}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000bc 	.word	0x200000bc

08000a08 <i2c_masterWrite>:

void i2c_masterWrite(uint8_t dev_address, uint8_t reg_address,
		uint8_t *val_pData) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af04      	add	r7, sp, #16
 8000a0e:	4603      	mov	r3, r0
 8000a10:	603a      	str	r2, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	460b      	mov	r3, r1
 8000a16:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&I2CApiHandle, (uint16_t) dev_address,
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	b299      	uxth	r1, r3
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	23c8      	movs	r3, #200	; 0xc8
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <i2c_masterWrite+0x34>)
 8000a30:	f001 f81a 	bl	8001a68 <HAL_I2C_Mem_Write>
			(uint8_t) reg_address, I2C_MEMADD_SIZE_8BIT, val_pData, 1,
			i2c_TIMEOUT);
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000bc 	.word	0x200000bc

08000a40 <uartinit>:
#define TO_UART_PDM	100

UART_HandleTypeDef UartHandle;


bool_t uartinit() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	// Configuramos los parametros del UART
	UartHandle.Instance = USART3;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <uartinit+0x50>)
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <uartinit+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <uartinit+0x50>)
 8000a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a50:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <uartinit+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <uartinit+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <uartinit+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <uartinit+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <uartinit+0x50>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <uartinit+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <uartinit+0x50>)
 8000a78:	f002 fce2 	bl	8003440 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <uartinit+0x4a>
		Error_Handler();
 8000a82:	f003 fb9d 	bl	80041c0 <Error_Handler>
		return false;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <uartinit+0x4c>
	}
	return true;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000110 	.word	0x20000110
 8000a94:	40004800 	.word	0x40004800

08000a98 <uartsendString>:

void uartsendString(uint8_t *pstring) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

	// Verificación parametro pstring
	if(pstring==NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <uartsendString+0x12>
	{
		Error_Handler();
 8000aa6:	f003 fb8b 	bl	80041c0 <Error_Handler>
	}
	uint16_t pos = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	81fb      	strh	r3, [r7, #14]

	// Transmisión de los caracteres previo al caracter especial
	do {
		HAL_UART_Transmit(&UartHandle, &pstring[pos], 1, TO_UART_PDM);
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	2364      	movs	r3, #100	; 0x64
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <uartsendString+0x50>)
 8000aba:	f002 fd0e 	bl	80034da <HAL_UART_Transmit>
		pos++;
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	81fb      	strh	r3, [r7, #14]
	} while (*(pstring + pos) != '\0');
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1ee      	bne.n	8000aae <uartsendString+0x16>

	// transmision del caracter especial \0
	HAL_UART_Transmit(&UartHandle, &pstring[pos], 1, TO_UART_PDM);
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	18d1      	adds	r1, r2, r3
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <uartsendString+0x50>)
 8000adc:	f002 fcfd 	bl	80034da <HAL_UART_Transmit>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000110 	.word	0x20000110

08000aec <uartSendStringSize>:

void uartSendStringSize(uint8_t *pstring, uint16_t size) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]

	// Transmisión de los caracteres dependiendo del tamaño ingresado (size)
	HAL_UART_Transmit(&UartHandle, pstring, size, TO_UART_PDM);
 8000af8:	887a      	ldrh	r2, [r7, #2]
 8000afa:	2364      	movs	r3, #100	; 0x64
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <uartSendStringSize+0x20>)
 8000b00:	f002 fceb 	bl	80034da <HAL_UART_Transmit>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000110 	.word	0x20000110

08000b10 <uartReceiveStringSize>:

// Aún no implementado
HAL_StatusTypeDef uartReceiveStringSize(uint8_t *pstring, uint16_t size) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Receive(&UartHandle, pstring, size, TO_UART_PDM);
 8000b1c:	887a      	ldrh	r2, [r7, #2]
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <uartReceiveStringSize+0x24>)
 8000b24:	f002 fd6b 	bl	80035fe <HAL_UART_Receive>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000110 	.word	0x20000110

08000b38 <adxl345_init>:
 * @param reg_address	Register to update
 * @param val_reg		Unsigned 8 bit value to write
 */
static void adxl345_setValReg(adxl345_reg reg_address, valReg_type val_reg);

bool_t adxl345_init() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
	uint8_t id_val = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]

	if (i2c_checkDevice(ADXL345)) {
 8000b42:	20a6      	movs	r0, #166	; 0xa6
 8000b44:	f7ff ff24 	bl	8000990 <i2c_checkDevice>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <adxl345_init+0x1e>
		id_val = adxl345_getID();
 8000b4e:	f000 f833 	bl	8000bb8 <adxl345_getID>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
	}

	if (id_val != ADXL345_DEVID) {
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2be5      	cmp	r3, #229	; 0xe5
 8000b5a:	d001      	beq.n	8000b60 <adxl345_init+0x28>
		return false;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e024      	b.n	8000baa <adxl345_init+0x72>
	}

	adxl345_sensor = (adxl345_d ) { .devId = id_val, .acc_On = false, .g_Range =
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <adxl345_init+0x7c>)
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	7013      	strb	r3, [r2, #0]
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <adxl345_init+0x7c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	705a      	strb	r2, [r3, #1]
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <adxl345_init+0x7c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	709a      	strb	r2, [r3, #2]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <adxl345_init+0x7c>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	70da      	strb	r2, [r3, #3]
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <adxl345_init+0x7c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	809a      	strh	r2, [r3, #4]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <adxl345_init+0x7c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	80da      	strh	r2, [r3, #6]
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <adxl345_init+0x7c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	811a      	strh	r2, [r3, #8]
					gRange_2g, .data_Rate = Data_Rate_0025_00_Hz, .val_x = 0,
					.val_y = 0, .val_z = 0, };
	adxl345_Enable(adxl345_sensor.acc_On);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <adxl345_init+0x7c>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f822 	bl	8000bd8 <adxl345_Enable>
	adxl345_setRange(adxl345_sensor.g_Range);
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <adxl345_init+0x7c>)
 8000b96:	789b      	ldrb	r3, [r3, #2]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f873 	bl	8000c84 <adxl345_setRange>
	adxl345_setRate(adxl345_sensor.data_Rate);
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <adxl345_init+0x7c>)
 8000ba0:	78db      	ldrb	r3, [r3, #3]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f8a2 	bl	8000cec <adxl345_setRate>

	return true;
 8000ba8:	2301      	movs	r3, #1

}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000154 	.word	0x20000154

08000bb8 <adxl345_getID>:

uint8_t adxl345_getID() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t val_address = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]

	i2c_masterRead(ADXL345, address_DEVID, &val_address, 1);
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	20a6      	movs	r0, #166	; 0xa6
 8000bca:	f7ff fefd 	bl	80009c8 <i2c_masterRead>

	return val_address;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <adxl345_Enable>:

void adxl345_Enable(bool_t state_pwr) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	uint8_t aux_wkUP = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]

	aux_wkUP = adxl345_getValReg(address_POWER_CTL);
 8000be6:	202d      	movs	r0, #45	; 0x2d
 8000be8:	f000 f817 	bl	8000c1a <adxl345_getValReg>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
	if (state_pwr) {
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <adxl345_Enable+0x28>
		aux_wkUP = aux_wkUP | WK_UP_BYTE;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e003      	b.n	8000c08 <adxl345_Enable+0x30>
	} else {
		aux_wkUP = aux_wkUP & ~WK_UP_BYTE;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f023 0308 	bic.w	r3, r3, #8
 8000c06:	73fb      	strb	r3, [r7, #15]
	}
	adxl345_setValReg(address_POWER_CTL, aux_wkUP);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	202d      	movs	r0, #45	; 0x2d
 8000c0e:	f000 f817 	bl	8000c40 <adxl345_setValReg>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <adxl345_getValReg>:

static uint8_t adxl345_getValReg(adxl345_reg reg_address) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_vreg = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

	i2c_masterRead(ADXL345, reg_address, &temp_vreg, 1);
 8000c28:	f107 020f 	add.w	r2, r7, #15
 8000c2c:	79f9      	ldrb	r1, [r7, #7]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	20a6      	movs	r0, #166	; 0xa6
 8000c32:	f7ff fec9 	bl	80009c8 <i2c_masterRead>

	return temp_vreg;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <adxl345_setValReg>:

static void adxl345_setValReg(adxl345_reg reg_address, valReg_type val_reg) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
	i2c_masterWrite(ADXL345, reg_address, &val_reg);
 8000c50:	1dba      	adds	r2, r7, #6
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4619      	mov	r1, r3
 8000c56:	20a6      	movs	r0, #166	; 0xa6
 8000c58:	f7ff fed6 	bl	8000a08 <i2c_masterWrite>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <adxl345_getRange>:

uint8_t adxl345_getRange() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	uint8_t val_reg = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	val_reg = adxl345_getValReg(address_DATA_FORMAT);
 8000c6e:	2031      	movs	r0, #49	; 0x31
 8000c70:	f7ff ffd3 	bl	8000c1a <adxl345_getValReg>
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]

	return val_reg;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <adxl345_setRange>:

void adxl345_setRange(adxl345_ranges range) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t val_reg = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
	adxl345_sensor.g_Range = range;
 8000c92:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <adxl345_setRange+0x44>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	7093      	strb	r3, [r2, #2]
	val_reg = adxl345_getRange();
 8000c98:	f7ff ffe4 	bl	8000c64 <adxl345_getRange>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
	val_reg = (val_reg & 0b11111100) | adxl345_sensor.g_Range;
 8000ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca4:	f023 0303 	bic.w	r3, r3, #3
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <adxl345_setRange+0x44>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	73fb      	strb	r3, [r7, #15]
	adxl345_setValReg(address_DATA_FORMAT, val_reg);
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2031      	movs	r0, #49	; 0x31
 8000cbc:	f7ff ffc0 	bl	8000c40 <adxl345_setValReg>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000154 	.word	0x20000154

08000ccc <adxl345_getRate>:

uint8_t adxl345_getRate() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t val_reg = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	val_reg = adxl345_getValReg(address_BW_RATE);
 8000cd6:	202c      	movs	r0, #44	; 0x2c
 8000cd8:	f7ff ff9f 	bl	8000c1a <adxl345_getValReg>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	return val_reg;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <adxl345_setRate>:

void adxl345_setRate(adxl345_rates rate) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t val_reg = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	adxl345_sensor.data_Rate = rate;
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <adxl345_setRate+0x30>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	70d3      	strb	r3, [r2, #3]
	val_reg = LOW_POWER_BIT << 4 | adxl345_sensor.data_Rate;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <adxl345_setRate+0x30>)
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	73fb      	strb	r3, [r7, #15]
	i2c_masterWrite(ADXL345, address_BW_RATE, &val_reg);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	212c      	movs	r1, #44	; 0x2c
 8000d0e:	20a6      	movs	r0, #166	; 0xa6
 8000d10:	f7ff fe7a 	bl	8000a08 <i2c_masterWrite>

}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000154 	.word	0x20000154

08000d20 <adxl345_getVals>:

void adxl345_getVals(int16_t *x, int16_t *y, int16_t *z) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	uint8_t x_buffer[2] = { 0 };
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	83bb      	strh	r3, [r7, #28]
	uint8_t y_buffer[2] = { 0 };
 8000d30:	2300      	movs	r3, #0
 8000d32:	833b      	strh	r3, [r7, #24]
	uint8_t z_buffer[2] = { 0 };
 8000d34:	2300      	movs	r3, #0
 8000d36:	82bb      	strh	r3, [r7, #20]

	if (!adxl345_sensor.acc_On) {
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <adxl345_getVals+0x94>)
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <adxl345_getVals+0x2c>
		adxl345_Enable(true);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff ff46 	bl	8000bd8 <adxl345_Enable>
	}

	i2c_masterRead(ADXL345, address_DATAX0, x_buffer, 2);
 8000d4c:	f107 021c 	add.w	r2, r7, #28
 8000d50:	2302      	movs	r3, #2
 8000d52:	2132      	movs	r1, #50	; 0x32
 8000d54:	20a6      	movs	r0, #166	; 0xa6
 8000d56:	f7ff fe37 	bl	80009c8 <i2c_masterRead>
	i2c_masterRead(ADXL345, address_DATAY0, y_buffer, 2);
 8000d5a:	f107 0218 	add.w	r2, r7, #24
 8000d5e:	2302      	movs	r3, #2
 8000d60:	2134      	movs	r1, #52	; 0x34
 8000d62:	20a6      	movs	r0, #166	; 0xa6
 8000d64:	f7ff fe30 	bl	80009c8 <i2c_masterRead>
	i2c_masterRead(ADXL345, address_DATAZ0, z_buffer, 2);
 8000d68:	f107 0214 	add.w	r2, r7, #20
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	2136      	movs	r1, #54	; 0x36
 8000d70:	20a6      	movs	r0, #166	; 0xa6
 8000d72:	f7ff fe29 	bl	80009c8 <i2c_masterRead>

	*x = x_buffer[1] << 8 | x_buffer[0];
 8000d76:	7f7b      	ldrb	r3, [r7, #29]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	7f3b      	ldrb	r3, [r7, #28]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	801a      	strh	r2, [r3, #0]
	*y = y_buffer[1] << 8 | y_buffer[0];
 8000d88:	7e7b      	ldrb	r3, [r7, #25]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	7e3b      	ldrb	r3, [r7, #24]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	801a      	strh	r2, [r3, #0]
	*z = z_buffer[1] << 8 | z_buffer[0];
 8000d9a:	7d7b      	ldrb	r3, [r7, #21]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	7d3b      	ldrb	r3, [r7, #20]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	801a      	strh	r2, [r3, #0]

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000154 	.word	0x20000154

08000db8 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10e      	bne.n	8000de6 <BSP_LED_Init+0x2e>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <BSP_LED_Init+0x94>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <BSP_LED_Init+0x94>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <BSP_LED_Init+0x94>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	e00d      	b.n	8000e02 <BSP_LED_Init+0x4a>
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <BSP_LED_Init+0x94>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <BSP_LED_Init+0x94>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <BSP_LED_Init+0x94>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <BSP_LED_Init+0x98>)
 8000e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <BSP_LED_Init+0x9c>)
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	f107 0214 	add.w	r2, r7, #20
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 faf2 	bl	8001410 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <BSP_LED_Init+0x9c>)
 8000e30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <BSP_LED_Init+0x98>)
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f000 fcaa 	bl	8001798 <HAL_GPIO_WritePin>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	08004c44 	.word	0x08004c44
 8000e54:	20000000 	.word	0x20000000

08000e58 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <BSP_LED_On+0x2c>)
 8000e66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <BSP_LED_On+0x30>)
 8000e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4619      	mov	r1, r3
 8000e76:	f000 fc8f 	bl	8001798 <HAL_GPIO_WritePin>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000000 	.word	0x20000000
 8000e88:	08004c44 	.word	0x08004c44

08000e8c <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <BSP_LED_Off+0x2c>)
 8000e9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <BSP_LED_Off+0x30>)
 8000ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f000 fc75 	bl	8001798 <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	08004c44 	.word	0x08004c44

08000ec0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <BSP_PB_Init+0xa4>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <BSP_PB_Init+0xa4>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <BSP_PB_Init+0xa4>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d112      	bne.n	8000f18 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efc:	2302      	movs	r3, #2
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <BSP_PB_Init+0xa8>)
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fa7c 	bl	8001410 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d11d      	bne.n	8000f5a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000f28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f2c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <BSP_PB_Init+0xa8>)
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	f107 020c 	add.w	r2, r7, #12
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fa67 	bl	8001410 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000f42:	2328      	movs	r3, #40	; 0x28
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fa29 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000f50:	2328      	movs	r3, #40	; 0x28
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fa40 	bl	80013da <HAL_NVIC_EnableIRQ>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	2000000c 	.word	0x2000000c

08000f6c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <BSP_PB_GetState+0x28>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fbef 	bl	8001768 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000000c 	.word	0x2000000c

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <SystemInit+0x60>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <SystemInit+0x60>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <SystemInit+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <SystemInit+0x64>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <SystemInit+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <SystemInit+0x64>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <SystemInit+0x64>)
 8000fc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <SystemInit+0x64>)
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <SystemInit+0x68>)
 8000fd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <SystemInit+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <SystemInit+0x64>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x60>)
 8000fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fec:	609a      	str	r2, [r3, #8]
#endif
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	24003010 	.word	0x24003010

08001004 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001058:	f000 f884 	bl	8001164 <HAL_IncTick>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f003 f8c8 	bl	8004224 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20030000 	.word	0x20030000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000160 	.word	0x20000160
 80010c8:	20000998 	.word	0x20000998

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x34>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x34>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x34>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x34>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f94f 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f001 fcb4 	bl	8002a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f967 	bl	80013f6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f000 f92f 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000010 	.word	0x20000010
 800115c:	20000018 	.word	0x20000018
 8001160:	20000014 	.word	0x20000014

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000018 	.word	0x20000018
 8001188:	20000164 	.word	0x20000164

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000164 	.word	0x20000164

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000018 	.word	0x20000018

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e177      	b.n	800171c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8166 	bne.w	8001716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80c0 	beq.w	8001716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <HAL_GPIO_Init+0x324>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a65      	ldr	r2, [pc, #404]	; (8001734 <HAL_GPIO_Init+0x324>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b63      	ldr	r3, [pc, #396]	; (8001734 <HAL_GPIO_Init+0x324>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a61      	ldr	r2, [pc, #388]	; (8001738 <HAL_GPIO_Init+0x328>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_GPIO_Init+0x32c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d037      	beq.n	800164e <HAL_GPIO_Init+0x23e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_GPIO_Init+0x330>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d031      	beq.n	800164a <HAL_GPIO_Init+0x23a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a56      	ldr	r2, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x334>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d02b      	beq.n	8001646 <HAL_GPIO_Init+0x236>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_GPIO_Init+0x338>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d025      	beq.n	8001642 <HAL_GPIO_Init+0x232>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a54      	ldr	r2, [pc, #336]	; (800174c <HAL_GPIO_Init+0x33c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01f      	beq.n	800163e <HAL_GPIO_Init+0x22e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a53      	ldr	r2, [pc, #332]	; (8001750 <HAL_GPIO_Init+0x340>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x22a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_GPIO_Init+0x344>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a51      	ldr	r2, [pc, #324]	; (8001758 <HAL_GPIO_Init+0x348>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a50      	ldr	r2, [pc, #320]	; (800175c <HAL_GPIO_Init+0x34c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4f      	ldr	r2, [pc, #316]	; (8001760 <HAL_GPIO_Init+0x350>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x21a>
 8001626:	2309      	movs	r3, #9
 8001628:	e012      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800162a:	230a      	movs	r3, #10
 800162c:	e010      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800162e:	2308      	movs	r3, #8
 8001630:	e00e      	b.n	8001650 <HAL_GPIO_Init+0x240>
 8001632:	2307      	movs	r3, #7
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_Init+0x240>
 8001636:	2306      	movs	r3, #6
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800163a:	2305      	movs	r3, #5
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x240>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x240>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x240>
 800164e:	2300      	movs	r3, #0
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x328>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_GPIO_Init+0x354>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001692:	4a34      	ldr	r2, [pc, #208]	; (8001764 <HAL_GPIO_Init+0x354>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_GPIO_Init+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016bc:	4a29      	ldr	r2, [pc, #164]	; (8001764 <HAL_GPIO_Init+0x354>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_GPIO_Init+0x354>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <HAL_GPIO_Init+0x354>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_GPIO_Init+0x354>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_GPIO_Init+0x354>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	f67f ae84 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40013800 	.word	0x40013800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40021000 	.word	0x40021000
 8001750:	40021400 	.word	0x40021400
 8001754:	40021800 	.word	0x40021800
 8001758:	40021c00 	.word	0x40021c00
 800175c:	40022000 	.word	0x40022000
 8001760:	40022400 	.word	0x40022400
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e12b      	b.n	8001a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f92e 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2224      	movs	r2, #36	; 0x24
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800182e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001830:	f001 fdde 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8001834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a81      	ldr	r2, [pc, #516]	; (8001a40 <HAL_I2C_Init+0x274>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d807      	bhi.n	8001850 <HAL_I2C_Init+0x84>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a80      	ldr	r2, [pc, #512]	; (8001a44 <HAL_I2C_Init+0x278>)
 8001844:	4293      	cmp	r3, r2
 8001846:	bf94      	ite	ls
 8001848:	2301      	movls	r3, #1
 800184a:	2300      	movhi	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e006      	b.n	800185e <HAL_I2C_Init+0x92>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4a7d      	ldr	r2, [pc, #500]	; (8001a48 <HAL_I2C_Init+0x27c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	bf94      	ite	ls
 8001858:	2301      	movls	r3, #1
 800185a:	2300      	movhi	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0e7      	b.n	8001a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a78      	ldr	r2, [pc, #480]	; (8001a4c <HAL_I2C_Init+0x280>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a6a      	ldr	r2, [pc, #424]	; (8001a40 <HAL_I2C_Init+0x274>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d802      	bhi.n	80018a0 <HAL_I2C_Init+0xd4>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	e009      	b.n	80018b4 <HAL_I2C_Init+0xe8>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a69      	ldr	r2, [pc, #420]	; (8001a50 <HAL_I2C_Init+0x284>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	3301      	adds	r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	495c      	ldr	r1, [pc, #368]	; (8001a40 <HAL_I2C_Init+0x274>)
 80018d0:	428b      	cmp	r3, r1
 80018d2:	d819      	bhi.n	8001908 <HAL_I2C_Init+0x13c>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018e8:	400b      	ands	r3, r1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <HAL_I2C_Init+0x138>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1e59      	subs	r1, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	e051      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001904:	2304      	movs	r3, #4
 8001906:	e04f      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d111      	bne.n	8001934 <HAL_I2C_Init+0x168>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e58      	subs	r0, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001922:	3301      	adds	r3, #1
 8001924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e012      	b.n	800195a <HAL_I2C_Init+0x18e>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	0099      	lsls	r1, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	fbb0 f3f3 	udiv	r3, r0, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Init+0x196>
 800195e:	2301      	movs	r3, #1
 8001960:	e022      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10e      	bne.n	8001988 <HAL_I2C_Init+0x1bc>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1e58      	subs	r0, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	fbb0 f3f3 	udiv	r3, r0, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001986:	e00f      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e58      	subs	r0, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	0099      	lsls	r1, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	fbb0 f3f3 	udiv	r3, r0, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6911      	ldr	r1, [r2, #16]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68d2      	ldr	r2, [r2, #12]
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	000186a0 	.word	0x000186a0
 8001a44:	001e847f 	.word	0x001e847f
 8001a48:	003d08ff 	.word	0x003d08ff
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	10624dd3 	.word	0x10624dd3

08001a54 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fb83 	bl	800118c <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	; (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fdad 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	; 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fbe4 	bl	8002304 <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fe2e 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fe1a 	bl	800282e <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff fa89 	bl	800118c <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	f040 8208 	bne.w	800209a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	497b      	ldr	r1, [pc, #492]	; (8001e80 <HAL_I2C_Mem_Read+0x224>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fcb3 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e1fb      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x56>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e1f4      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2222      	movs	r2, #34	; 0x22
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <HAL_I2C_Mem_Read+0x228>)
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	88f8      	ldrh	r0, [r7, #6]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fb80 	bl	8002430 <I2C_RequestMemoryRead>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1b0      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e184      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11b      	bne.n	8001daa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e164      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11b      	bne.n	8001dea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	e144      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e00:	e138      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f200 80f1 	bhi.w	8001fee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d123      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fd49 	bl	80028b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e139      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e5a:	e10b      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14e      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <HAL_I2C_Mem_Read+0x22c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fbc6 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e10e      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f00:	e0b8      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4966      	ldr	r1, [pc, #408]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fb77 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0bf      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	494f      	ldr	r1, [pc, #316]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb49 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e091      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fec:	e042      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fc5c 	bl	80028b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e04c      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d118      	bne.n	8002074 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aec2 	bne.w	8001e02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010004 	.word	0x00010004

080020a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff f868 	bl	800118c <HAL_GetTick>
 80020bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f040 8111 	bne.w	80022f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4988      	ldr	r1, [pc, #544]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fa90 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	e104      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_I2C_IsDeviceReady+0x50>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0fd      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2224      	movs	r2, #36	; 0x24
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_I2C_IsDeviceReady+0x258>)
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002150:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa4e 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002178:	d103      	bne.n	8002182 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b6      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002194:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe fff9 	bl	800118c <HAL_GetTick>
 800219a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ca:	e025      	b.n	8002218 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7fe ffde 	bl	800118c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <HAL_I2C_IsDeviceReady+0x13a>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22a0      	movs	r2, #160	; 0xa0
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2ba0      	cmp	r3, #160	; 0xa0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 800222a:	7dbb      	ldrb	r3, [r7, #22]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0cd      	beq.n	80021cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d129      	bne.n	800229a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002254:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4921      	ldr	r1, [pc, #132]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9c2 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e036      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e02c      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	490f      	ldr	r1, [pc, #60]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f99e 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e012      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f4ff af32 	bcc.w	8002142 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2200      	movs	r2, #0
 8002336:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f960 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002354:	d103      	bne.n	800235e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e05f      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002370:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <I2C_RequestMemoryWrite+0x128>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f998 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e04c      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fa02 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d107      	bne.n	80023c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e02b      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d0:	893b      	ldrh	r3, [r7, #8]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	e021      	b.n	8002420 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023dc:	893b      	ldrh	r3, [r7, #8]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	6a39      	ldr	r1, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f9dc 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d107      	bne.n	8002412 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002410:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e005      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002416:	893b      	ldrh	r3, [r7, #8]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	00010002 	.word	0x00010002

08002430 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002458:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2200      	movs	r2, #0
 8002472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8c2 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d103      	bne.n	800249a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0aa      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	4952      	ldr	r1, [pc, #328]	; (80025fc <I2C_RequestMemoryRead+0x1cc>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f8fa 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e097      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f964 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d107      	bne.n	8002502 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e076      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e021      	b.n	800255c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	6a39      	ldr	r1, [r7, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f93e 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b04      	cmp	r3, #4
 800253c:	d107      	bne.n	800254e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e050      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f923 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e035      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002596:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2200      	movs	r2, #0
 80025a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f82b 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d103      	bne.n	80025c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e013      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025cc:	897b      	ldrh	r3, [r7, #10]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <I2C_RequestMemoryRead+0x1cc>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f863 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00010002 	.word	0x00010002

08002600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	e025      	b.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002618:	d021      	beq.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe fdb7 	bl	800118c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e023      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10d      	bne.n	8002684 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	e00c      	b.n	800269e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0b6      	beq.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026bc:	e051      	b.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d123      	bne.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e046      	b.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d021      	beq.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fd35 	bl	800118c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e020      	b.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10c      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e00b      	b.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d18d      	bne.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b8:	e02d      	b.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8ce 	bl	800295c <I2C_IsAcknowledgeFailed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e02d      	b.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d021      	beq.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fcdb 	bl	800118c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d116      	bne.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e007      	b.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d1ca      	bne.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800283a:	e02d      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f88d 	bl	800295c <I2C_IsAcknowledgeFailed>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e02d      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002852:	d021      	beq.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7fe fc9a 	bl	800118c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d1ca      	bne.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028bc:	e042      	b.n	8002944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d119      	bne.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0210 	mvn.w	r2, #16
 80028d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e029      	b.n	8002954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002900:	f7fe fc44 	bl	800118c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d1b5      	bne.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d11b      	bne.n	80029ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800297c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 8002a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_UART_MspInit+0x9c>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4809      	ldr	r0, [pc, #36]	; (8002a5c <HAL_UART_MspInit+0xa0>)
 8002a36:	f7fe fceb 	bl	8001410 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002a40:	2307      	movs	r3, #7
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4804      	ldr	r0, [pc, #16]	; (8002a5c <HAL_UART_MspInit+0xa0>)
 8002a4c:	f7fe fce0 	bl	8001410 <HAL_GPIO_Init>
}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020c00 	.word	0x40020c00

08002a60 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9c:	f7fe fb76 	bl	800118c <HAL_GetTick>
 8002aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa2:	e009      	b.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb72 	bl	800118c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab2:	d901      	bls.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e01f      	b.n	8002af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d1ee      	bne.n	8002aa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002acc:	f7fe fb5e 	bl	800118c <HAL_GetTick>
 8002ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad2:	e009      	b.n	8002ae8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ad4:	f7fe fb5a 	bl	800118c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ae2:	d901      	bls.n	8002ae8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e007      	b.n	8002af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	420e0040 	.word	0x420e0040
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	420e0044 	.word	0x420e0044

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e267      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d075      	beq.n	8002c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2e:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d112      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b46:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	4b7e      	ldr	r3, [pc, #504]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05b      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d157      	bne.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e242      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x74>
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x98>
 8002b8e:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6f      	ldr	r2, [pc, #444]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6c      	ldr	r2, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	4b69      	ldr	r3, [pc, #420]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a68      	ldr	r2, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fae0 	bl	800118c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fadc 	bl	800118c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e207      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe facc 	bl	800118c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fac8 	bl	800118c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1f3      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d063      	beq.n	8002cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1c7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4937      	ldr	r1, [pc, #220]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e03a      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fa81 	bl	800118c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fa7d 	bl	800118c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1a8      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4925      	ldr	r1, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fa60 	bl	800118c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fa5c 	bl	800118c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e187      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d036      	beq.n	8002d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe fa40 	bl	800118c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fe fa3c 	bl	800118c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e167      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x200>
 8002d2e:	e01b      	b.n	8002d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fa29 	bl	800118c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	e00e      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fa25 	bl	800118c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d907      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e150      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	42470000 	.word	0x42470000
 8002d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ea      	bne.n	8002d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8097 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b7d      	ldr	r3, [pc, #500]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a7c      	ldr	r2, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b77      	ldr	r3, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a73      	ldr	r2, [pc, #460]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe f9e5 	bl	800118c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fe f9e1 	bl	800118c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e10c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
 8002dec:	4b64      	ldr	r3, [pc, #400]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a63      	ldr	r2, [pc, #396]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	e01c      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x30c>
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a5e      	ldr	r2, [pc, #376]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a57      	ldr	r2, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a54      	ldr	r2, [pc, #336]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	f023 0304 	bic.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f9a6 	bl	800118c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe f9a2 	bl	800118c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0cb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RCC_OscConfig+0x334>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe f990 	bl	800118c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe f98c 	bl	800118c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0b5      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ee      	bne.n	8002e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a1 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d05c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d141      	bne.n	8002f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f960 	bl	800118c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe f95c 	bl	800118c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e087      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	491b      	ldr	r1, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe f935 	bl	800118c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe f931 	bl	800118c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e05c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x416>
 8002f44:	e054      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f91e 	bl	800118c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe f91a 	bl	800118c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e045      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x444>
 8002f72:	e03d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e038      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d121      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11a      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cc      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d90c      	bls.n	800303c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d044      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e067      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4934      	ldr	r1, [pc, #208]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe f84c 	bl	800118c <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe f848 	bl	800118c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20c      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ffac 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08004c4c 	.word	0x08004c4c
 80031c4:	20000010 	.word	0x20000010
 80031c8:	20000014 	.word	0x20000014

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b094      	sub	sp, #80	; 0x50
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	647b      	str	r3, [r7, #68]	; 0x44
 80031d8:	2300      	movs	r3, #0
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	2300      	movs	r3, #0
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b79      	ldr	r3, [pc, #484]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80e1 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e0db      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003204:	e0db      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800320a:	e0d8      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
 800322c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
 800323a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800323e:	4622      	mov	r2, r4
 8003240:	462b      	mov	r3, r5
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4621      	mov	r1, r4
 8003258:	1a51      	subs	r1, r2, r1
 800325a:	6139      	str	r1, [r7, #16]
 800325c:	4629      	mov	r1, r5
 800325e:	eb63 0301 	sbc.w	r3, r3, r1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003270:	4659      	mov	r1, fp
 8003272:	018b      	lsls	r3, r1, #6
 8003274:	4651      	mov	r1, sl
 8003276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327a:	4651      	mov	r1, sl
 800327c:	018a      	lsls	r2, r1, #6
 800327e:	4651      	mov	r1, sl
 8003280:	ebb2 0801 	subs.w	r8, r2, r1
 8003284:	4659      	mov	r1, fp
 8003286:	eb63 0901 	sbc.w	r9, r3, r1
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329e:	4690      	mov	r8, r2
 80032a0:	4699      	mov	r9, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	eb18 0303 	adds.w	r3, r8, r3
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	462b      	mov	r3, r5
 80032ac:	eb49 0303 	adc.w	r3, r9, r3
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032be:	4629      	mov	r1, r5
 80032c0:	024b      	lsls	r3, r1, #9
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c8:	4621      	mov	r1, r4
 80032ca:	024a      	lsls	r2, r1, #9
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032dc:	f7fc ffe8 	bl	80002b0 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e8:	e058      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	4611      	mov	r1, r2
 80032f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4641      	mov	r1, r8
 800331e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003322:	4649      	mov	r1, r9
 8003324:	eb63 0b01 	sbc.w	fp, r3, r1
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003334:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003338:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800333c:	ebb2 040a 	subs.w	r4, r2, sl
 8003340:	eb63 050b 	sbc.w	r5, r3, fp
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	00eb      	lsls	r3, r5, #3
 800334e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003352:	00e2      	lsls	r2, r4, #3
 8003354:	4614      	mov	r4, r2
 8003356:	461d      	mov	r5, r3
 8003358:	4643      	mov	r3, r8
 800335a:	18e3      	adds	r3, r4, r3
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	464b      	mov	r3, r9
 8003360:	eb45 0303 	adc.w	r3, r5, r3
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003372:	4629      	mov	r1, r5
 8003374:	028b      	lsls	r3, r1, #10
 8003376:	4621      	mov	r1, r4
 8003378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800337c:	4621      	mov	r1, r4
 800337e:	028a      	lsls	r2, r1, #10
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	61fa      	str	r2, [r7, #28]
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	f7fc ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3750      	adds	r7, #80	; 0x50
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000010 	.word	0x20000010

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033f4:	f7ff fff0 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	08004c5c 	.word	0x08004c5c

08003418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800341c:	f7ff ffdc 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0b5b      	lsrs	r3, r3, #13
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4903      	ldr	r1, [pc, #12]	; (800343c <HAL_RCC_GetPCLK2Freq+0x24>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	08004c5c 	.word	0x08004c5c

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03f      	b.n	80034d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff faa8 	bl	80029bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f9cb 	bl	8003820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08a      	sub	sp, #40	; 0x28
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d17c      	bne.n	80035f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Transmit+0x2c>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e075      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x3e>
 8003514:	2302      	movs	r3, #2
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352e:	f7fd fe2d 	bl	800118c <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d108      	bne.n	800355c <HAL_UART_Transmit+0x82>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e003      	b.n	8003564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800356c:	e02a      	b.n	80035c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f8e2 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	3302      	adds	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e007      	b.n	80035b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1cf      	bne.n	800356e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f8b2 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b08a      	sub	sp, #40	; 0x28
 8003602:	af02      	add	r7, sp, #8
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 808c 	bne.w	8003738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Receive+0x2e>
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e084      	b.n	800373a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_UART_Receive+0x40>
 800363a:	2302      	movs	r3, #2
 800363c:	e07d      	b.n	800373a <HAL_UART_Receive+0x13c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2222      	movs	r2, #34	; 0x22
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365a:	f7fd fd97 	bl	800118c <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	d108      	bne.n	8003688 <HAL_UART_Receive+0x8a>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e003      	b.n	8003690 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003698:	e043      	b.n	8003722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2120      	movs	r1, #32
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f84c 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e042      	b.n	800373a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3302      	adds	r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e01f      	b.n	8003714 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d007      	beq.n	80036ee <HAL_UART_Receive+0xf0>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_UART_Receive+0xfe>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e008      	b.n	800370e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003708:	b2da      	uxtb	r2, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1b6      	bne.n	800369a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b090      	sub	sp, #64	; 0x40
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	e050      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800375a:	d04c      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x30>
 8003762:	f7fd fd13 	bl	800118c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800376e:	429a      	cmp	r2, r3
 8003770:	d241      	bcs.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003792:	637a      	str	r2, [r7, #52]	; 0x34
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e5      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	613b      	str	r3, [r7, #16]
   return(result);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c6:	623a      	str	r2, [r7, #32]
 80037c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	69f9      	ldr	r1, [r7, #28]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d09f      	beq.n	8003754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3740      	adds	r7, #64	; 0x40
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b0c0      	sub	sp, #256	; 0x100
 8003826:	af00      	add	r7, sp, #0
 8003828:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	68d9      	ldr	r1, [r3, #12]
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	ea40 0301 	orr.w	r3, r0, r1
 8003848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	431a      	orrs	r2, r3
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	431a      	orrs	r2, r3
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003878:	f021 010c 	bic.w	r1, r1, #12
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003886:	430b      	orrs	r3, r1
 8003888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	6999      	ldr	r1, [r3, #24]
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	ea40 0301 	orr.w	r3, r0, r1
 80038a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <UART_SetConfig+0x2cc>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d005      	beq.n	80038c0 <UART_SetConfig+0xa0>
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <UART_SetConfig+0x2d0>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d104      	bne.n	80038ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7ff fdaa 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 80038c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038c8:	e003      	b.n	80038d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ca:	f7ff fd91 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 80038ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	f040 810c 	bne.w	8003af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038f2:	4622      	mov	r2, r4
 80038f4:	462b      	mov	r3, r5
 80038f6:	1891      	adds	r1, r2, r2
 80038f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80038fa:	415b      	adcs	r3, r3
 80038fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003902:	4621      	mov	r1, r4
 8003904:	eb12 0801 	adds.w	r8, r2, r1
 8003908:	4629      	mov	r1, r5
 800390a:	eb43 0901 	adc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb18 0303 	adds.w	r3, r8, r3
 800392c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003930:	462b      	mov	r3, r5
 8003932:	eb49 0303 	adc.w	r3, r9, r3
 8003936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003946:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800394a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800394e:	460b      	mov	r3, r1
 8003950:	18db      	adds	r3, r3, r3
 8003952:	653b      	str	r3, [r7, #80]	; 0x50
 8003954:	4613      	mov	r3, r2
 8003956:	eb42 0303 	adc.w	r3, r2, r3
 800395a:	657b      	str	r3, [r7, #84]	; 0x54
 800395c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003964:	f7fc fca4 	bl	80002b0 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <UART_SetConfig+0x2d4>)
 800396e:	fba3 2302 	umull	r2, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	011c      	lsls	r4, r3, #4
 8003976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003980:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003990:	415b      	adcs	r3, r3
 8003992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003998:	4641      	mov	r1, r8
 800399a:	eb12 0a01 	adds.w	sl, r2, r1
 800399e:	4649      	mov	r1, r9
 80039a0:	eb43 0b01 	adc.w	fp, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b8:	4692      	mov	sl, r2
 80039ba:	469b      	mov	fp, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	eb1a 0303 	adds.w	r3, sl, r3
 80039c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c6:	464b      	mov	r3, r9
 80039c8:	eb4b 0303 	adc.w	r3, fp, r3
 80039cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039e4:	460b      	mov	r3, r1
 80039e6:	18db      	adds	r3, r3, r3
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ea:	4613      	mov	r3, r2
 80039ec:	eb42 0303 	adc.w	r3, r2, r3
 80039f0:	647b      	str	r3, [r7, #68]	; 0x44
 80039f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039fa:	f7fc fc59 	bl	80002b0 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <UART_SetConfig+0x2d4>)
 8003a06:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2264      	movs	r2, #100	; 0x64
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	1acb      	subs	r3, r1, r3
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <UART_SetConfig+0x2d4>)
 8003a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a28:	441c      	add	r4, r3
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a44:	415b      	adcs	r3, r3
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	1851      	adds	r1, r2, r1
 8003a50:	6339      	str	r1, [r7, #48]	; 0x30
 8003a52:	4649      	mov	r1, r9
 8003a54:	414b      	adcs	r3, r1
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a64:	4659      	mov	r1, fp
 8003a66:	00cb      	lsls	r3, r1, #3
 8003a68:	4651      	mov	r1, sl
 8003a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6e:	4651      	mov	r1, sl
 8003a70:	00ca      	lsls	r2, r1, #3
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	4642      	mov	r2, r8
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a80:	464b      	mov	r3, r9
 8003a82:	460a      	mov	r2, r1
 8003a84:	eb42 0303 	adc.w	r3, r2, r3
 8003a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	18db      	adds	r3, r3, r3
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ab6:	f7fc fbfb 	bl	80002b0 <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <UART_SetConfig+0x2d4>)
 8003ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2164      	movs	r1, #100	; 0x64
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	3332      	adds	r3, #50	; 0x32
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <UART_SetConfig+0x2d4>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	f003 0207 	and.w	r2, r3, #7
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4422      	add	r2, r4
 8003ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ae8:	e105      	b.n	8003cf6 <UART_SetConfig+0x4d6>
 8003aea:	bf00      	nop
 8003aec:	40011000 	.word	0x40011000
 8003af0:	40011400 	.word	0x40011400
 8003af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	6239      	str	r1, [r7, #32]
 8003b12:	415b      	adcs	r3, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	1854      	adds	r4, r2, r1
 8003b1e:	4649      	mov	r1, r9
 8003b20:	eb43 0501 	adc.w	r5, r3, r1
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	00eb      	lsls	r3, r5, #3
 8003b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b32:	00e2      	lsls	r2, r4, #3
 8003b34:	4614      	mov	r4, r2
 8003b36:	461d      	mov	r5, r3
 8003b38:	4643      	mov	r3, r8
 8003b3a:	18e3      	adds	r3, r4, r3
 8003b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b40:	464b      	mov	r3, r9
 8003b42:	eb45 0303 	adc.w	r3, r5, r3
 8003b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b66:	4629      	mov	r1, r5
 8003b68:	008b      	lsls	r3, r1, #2
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b70:	4621      	mov	r1, r4
 8003b72:	008a      	lsls	r2, r1, #2
 8003b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b78:	f7fc fb9a 	bl	80002b0 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <UART_SetConfig+0x4e4>)
 8003b82:	fba3 2302 	umull	r2, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	011c      	lsls	r4, r3, #4
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	61b9      	str	r1, [r7, #24]
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6139      	str	r1, [r7, #16]
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c04:	4649      	mov	r1, r9
 8003c06:	008b      	lsls	r3, r1, #2
 8003c08:	4641      	mov	r1, r8
 8003c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c0e:	4641      	mov	r1, r8
 8003c10:	008a      	lsls	r2, r1, #2
 8003c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c16:	f7fc fb4b 	bl	80002b0 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <UART_SetConfig+0x4e4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <UART_SetConfig+0x4e4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	441c      	add	r4, r3
 8003c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c44:	2200      	movs	r2, #0
 8003c46:	673b      	str	r3, [r7, #112]	; 0x70
 8003c48:	677a      	str	r2, [r7, #116]	; 0x74
 8003c4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c4e:	4642      	mov	r2, r8
 8003c50:	464b      	mov	r3, r9
 8003c52:	1891      	adds	r1, r2, r2
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	415b      	adcs	r3, r3
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c5e:	4641      	mov	r1, r8
 8003c60:	1851      	adds	r1, r2, r1
 8003c62:	6039      	str	r1, [r7, #0]
 8003c64:	4649      	mov	r1, r9
 8003c66:	414b      	adcs	r3, r1
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c76:	4659      	mov	r1, fp
 8003c78:	00cb      	lsls	r3, r1, #3
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c80:	4651      	mov	r1, sl
 8003c82:	00ca      	lsls	r2, r1, #3
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4642      	mov	r2, r8
 8003c8c:	189b      	adds	r3, r3, r2
 8003c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c90:	464b      	mov	r3, r9
 8003c92:	460a      	mov	r2, r1
 8003c94:	eb42 0303 	adc.w	r3, r2, r3
 8003c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	008a      	lsls	r2, r1, #2
 8003cc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cc4:	f7fc faf4 	bl	80002b0 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <UART_SetConfig+0x4e4>)
 8003cce:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2164      	movs	r1, #100	; 0x64
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	; 0x32
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <UART_SetConfig+0x4e4>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4422      	add	r2, r4
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	bf00      	nop
 8003cf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d02:	bf00      	nop
 8003d04:	51eb851f 	.word	0x51eb851f

08003d08 <adxl345_FSM_init>:
static char serial_bufferRx[1024];
static uint16_t cont_txtBuffer = 0;
static HAL_StatusTypeDef msg_Received;


void adxl345_FSM_init() {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	uartsendString((uint8_t*) "\nInit State\r\n");
 8003d0c:	480e      	ldr	r0, [pc, #56]	; (8003d48 <adxl345_FSM_init+0x40>)
 8003d0e:	f7fc fec3 	bl	8000a98 <uartsendString>
	delayInit(&accSample_delay, SAMPLE_DELAY); //!< Send samples each SAMPLE_DELAY
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	480d      	ldr	r0, [pc, #52]	; (8003d4c <adxl345_FSM_init+0x44>)
 8003d16:	f7fc fd07 	bl	8000728 <delayInit>
	if (!adxl345_init()) {
 8003d1a:	f7fc ff0d 	bl	8000b38 <adxl345_init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f083 0301 	eor.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <adxl345_FSM_init+0x26>
		Error_Handler();
 8003d2a:	f000 fa49 	bl	80041c0 <Error_Handler>
	}
	HAL_Delay(1000);
 8003d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d32:	f7fd fa37 	bl	80011a4 <HAL_Delay>
	prev_tpState = FSM_reset;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <adxl345_FSM_init+0x48>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
	curr_tpState = IDLE;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <adxl345_FSM_init+0x4c>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	08004b84 	.word	0x08004b84
 8003d4c:	2000016c 	.word	0x2000016c
 8003d50:	20000169 	.word	0x20000169
 8003d54:	20000168 	.word	0x20000168

08003d58 <adxl345_FSM_update>:

void adxl345_FSM_update() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af02      	add	r7, sp, #8
	//!< Check command received
	msg_Received = uartReceiveStringSize((uint8_t*) serial_bufferRx, 5);
 8003d5e:	2105      	movs	r1, #5
 8003d60:	4884      	ldr	r0, [pc, #528]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003d62:	f7fc fed5 	bl	8000b10 <uartReceiveStringSize>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <adxl345_FSM_update+0x220>)
 8003d6c:	701a      	strb	r2, [r3, #0]

	switch (curr_tpState) {
 8003d6e:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	f000 8116 	beq.w	8003fa4 <adxl345_FSM_update+0x24c>
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	f300 815f 	bgt.w	800403c <adxl345_FSM_update+0x2e4>
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <adxl345_FSM_update+0x30>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d040      	beq.n	8003e08 <adxl345_FSM_update+0xb0>
 8003d86:	e159      	b.n	800403c <adxl345_FSM_update+0x2e4>
	/**
	 * Waiting until button is pressed or
	 * serial command is received (SAMPLING, CONFIGURE)
	 */
	case IDLE:
		if (prev_tpState != curr_tpState) {
 8003d88:	4b7d      	ldr	r3, [pc, #500]	; (8003f80 <adxl345_FSM_update+0x228>)
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d00e      	beq.n	8003db2 <adxl345_FSM_update+0x5a>
			uartsendString((uint8_t*) "\nIdle State\r\n");
 8003d94:	487b      	ldr	r0, [pc, #492]	; (8003f84 <adxl345_FSM_update+0x22c>)
 8003d96:	f7fc fe7f 	bl	8000a98 <uartsendString>
			adxl345_Enable(false);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fc ff1c 	bl	8000bd8 <adxl345_Enable>
			BSP_LEDs_On(false,false,false);
 8003da0:	2200      	movs	r2, #0
 8003da2:	2100      	movs	r1, #0
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7fc fd61 	bl	800086c <BSP_LEDs_On>
			prev_tpState = curr_tpState;
 8003daa:	4b74      	ldr	r3, [pc, #464]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <adxl345_FSM_update+0x228>)
 8003db0:	701a      	strb	r2, [r3, #0]
		}

		BSP_LEDs_On(true,true,true);
 8003db2:	2201      	movs	r2, #1
 8003db4:	2101      	movs	r1, #1
 8003db6:	2001      	movs	r0, #1
 8003db8:	f7fc fd58 	bl	800086c <BSP_LEDs_On>
		if (msg_Received == HAL_OK) {
 8003dbc:	4b6e      	ldr	r3, [pc, #440]	; (8003f78 <adxl345_FSM_update+0x220>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d117      	bne.n	8003df4 <adxl345_FSM_update+0x9c>
			if (strcmp((const char*) serial_bufferRx, rx_Cmds[rx_Start]) == 0)
 8003dc4:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <adxl345_FSM_update+0x230>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	486a      	ldr	r0, [pc, #424]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003dcc:	f7fc fa10 	bl	80001f0 <strcmp>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <adxl345_FSM_update+0x84>
				curr_tpState = SAMPLING;
 8003dd6:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003dd8:	2203      	movs	r2, #3
 8003dda:	701a      	strb	r2, [r3, #0]

			if (strcmp((const char*) serial_bufferRx, rx_Cmds[rx_Config]) == 0)
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <adxl345_FSM_update+0x230>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4619      	mov	r1, r3
 8003de2:	4864      	ldr	r0, [pc, #400]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003de4:	f7fc fa04 	bl	80001f0 <strcmp>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <adxl345_FSM_update+0x9c>
				curr_tpState = CONFIG;
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003df0:	2202      	movs	r2, #2
 8003df2:	701a      	strb	r2, [r3, #0]
		}

		if (readKey())
 8003df4:	f7fc fc82 	bl	80006fc <readKey>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8125 	beq.w	800404a <adxl345_FSM_update+0x2f2>
			curr_tpState = CONFIG;
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]
		break;
 8003e06:	e120      	b.n	800404a <adxl345_FSM_update+0x2f2>
		 * set gravity ranges in 2g, 4g, 8g or 16g and
		 * sample rates in normal mode from 0.1Hz (index=0)
		 * to 3.2KHz (index=15)
		 */
	case CONFIG:
		if (prev_tpState != curr_tpState) {
 8003e08:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <adxl345_FSM_update+0x228>)
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d00b      	beq.n	8003e2c <adxl345_FSM_update+0xd4>
			uartsendString((uint8_t*) "\nConfig State\r\n");
 8003e14:	485d      	ldr	r0, [pc, #372]	; (8003f8c <adxl345_FSM_update+0x234>)
 8003e16:	f7fc fe3f 	bl	8000a98 <uartsendString>
			prev_tpState = curr_tpState;
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	4b58      	ldr	r3, [pc, #352]	; (8003f80 <adxl345_FSM_update+0x228>)
 8003e20:	701a      	strb	r2, [r3, #0]
			BSP_LEDs_On(false,false,false);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7fc fd20 	bl	800086c <BSP_LEDs_On>
		}
		BSP_LEDs_On(true,false,false);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7fc fd1b 	bl	800086c <BSP_LEDs_On>
		/**
		 * Commands in ASCII
		 * Range command = ran_0, ran_1, ran_2, or "ran_3
		 * Sample rate command = rt_00, rt_01, rt_02 ... rt_15
		 */
		if (msg_Received == HAL_OK) {
 8003e36:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <adxl345_FSM_update+0x220>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d15b      	bne.n	8003ef6 <adxl345_FSM_update+0x19e>
			if (serial_bufferRx[0] == 'r' && serial_bufferRx[1] == 'a'
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b72      	cmp	r3, #114	; 0x72
 8003e44:	d11a      	bne.n	8003e7c <adxl345_FSM_update+0x124>
 8003e46:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b61      	cmp	r3, #97	; 0x61
 8003e4c:	d116      	bne.n	8003e7c <adxl345_FSM_update+0x124>
					&& serial_bufferRx[2] == 'n' && serial_bufferRx[3] == '_'
 8003e4e:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	2b6e      	cmp	r3, #110	; 0x6e
 8003e54:	d112      	bne.n	8003e7c <adxl345_FSM_update+0x124>
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b5f      	cmp	r3, #95	; 0x5f
 8003e5c:	d10e      	bne.n	8003e7c <adxl345_FSM_update+0x124>
					&& serial_bufferRx[4] > 47 && serial_bufferRx[4] < 52) {
 8003e5e:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	2b2f      	cmp	r3, #47	; 0x2f
 8003e64:	d90a      	bls.n	8003e7c <adxl345_FSM_update+0x124>
 8003e66:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e68:	791b      	ldrb	r3, [r3, #4]
 8003e6a:	2b33      	cmp	r3, #51	; 0x33
 8003e6c:	d806      	bhi.n	8003e7c <adxl345_FSM_update+0x124>
				adxl345_setRange(serial_bufferRx[4] - 48);
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e70:	791b      	ldrb	r3, [r3, #4]
 8003e72:	3b30      	subs	r3, #48	; 0x30
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc ff04 	bl	8000c84 <adxl345_setRange>
			}

			if (serial_bufferRx[0] == 'r' && serial_bufferRx[1] == 't'
 8003e7c:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b72      	cmp	r3, #114	; 0x72
 8003e82:	d12c      	bne.n	8003ede <adxl345_FSM_update+0x186>
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b74      	cmp	r3, #116	; 0x74
 8003e8a:	d128      	bne.n	8003ede <adxl345_FSM_update+0x186>
					&& serial_bufferRx[2] == '_' && serial_bufferRx[3] > 47
 8003e8c:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e8e:	789b      	ldrb	r3, [r3, #2]
 8003e90:	2b5f      	cmp	r3, #95	; 0x5f
 8003e92:	d124      	bne.n	8003ede <adxl345_FSM_update+0x186>
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e96:	78db      	ldrb	r3, [r3, #3]
 8003e98:	2b2f      	cmp	r3, #47	; 0x2f
 8003e9a:	d920      	bls.n	8003ede <adxl345_FSM_update+0x186>
					&& serial_bufferRx[3] < 58 && serial_bufferRx[4] > 47
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003e9e:	78db      	ldrb	r3, [r3, #3]
 8003ea0:	2b39      	cmp	r3, #57	; 0x39
 8003ea2:	d81c      	bhi.n	8003ede <adxl345_FSM_update+0x186>
 8003ea4:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003ea6:	791b      	ldrb	r3, [r3, #4]
 8003ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8003eaa:	d918      	bls.n	8003ede <adxl345_FSM_update+0x186>
					&& serial_bufferRx[4] < 58) {
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	2b39      	cmp	r3, #57	; 0x39
 8003eb2:	d814      	bhi.n	8003ede <adxl345_FSM_update+0x186>
				adxl345_setRate(
						(serial_bufferRx[3] - 48) * 10
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	3b30      	subs	r3, #48	; 0x30
								+ (serial_bufferRx[4] - 48));
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003ec8:	791b      	ldrb	r3, [r3, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	b2db      	uxtb	r3, r3
				adxl345_setRate(
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc ff0a 	bl	8000cec <adxl345_setRate>
				msg_Received = HAL_ERROR;
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <adxl345_FSM_update+0x220>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
			}

			if (strcmp((const char*) serial_bufferRx, rx_Cmds[rx_Start]) == 0)
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <adxl345_FSM_update+0x230>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4823      	ldr	r0, [pc, #140]	; (8003f74 <adxl345_FSM_update+0x21c>)
 8003ee6:	f7fc f983 	bl	80001f0 <strcmp>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <adxl345_FSM_update+0x19e>
				curr_tpState = SAMPLING;
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	701a      	strb	r2, [r3, #0]

		/**
		 * Print by actual principal configuration values from ADXL345
		 * before change state
		 */
		if (readKey()) {
 8003ef6:	f7fc fc01 	bl	80006fc <readKey>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a6 	beq.w	800404e <adxl345_FSM_update+0x2f6>
			cont_txtBuffer = 0;
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <adxl345_FSM_update+0x238>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	801a      	strh	r2, [r3, #0]
			acc_Range=adxl345_getRange();
 8003f08:	f7fc feac 	bl	8000c64 <adxl345_getRange>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <adxl345_FSM_update+0x23c>)
 8003f12:	701a      	strb	r2, [r3, #0]
			acc_Rate=adxl345_getRate();
 8003f14:	f7fc feda 	bl	8000ccc <adxl345_getRate>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <adxl345_FSM_update+0x240>)
 8003f1e:	701a      	strb	r2, [r3, #0]
			if ((acc_Rate>>5)!=0) {
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <adxl345_FSM_update+0x240>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <adxl345_FSM_update+0x1d8>
				Error_Handler();
 8003f2c:	f000 f948 	bl	80041c0 <Error_Handler>
			}
			cont_txtBuffer = sprintf(serial_bufferTx,
					"\n DeviceID ADXL345 = 0x%02X "
							" Range n = %d"
							" Rate  n = %d\n", adxl345_getID(),
 8003f30:	f7fc fe42 	bl	8000bb8 <adxl345_getID>
 8003f34:	4603      	mov	r3, r0
			cont_txtBuffer = sprintf(serial_bufferTx,
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <adxl345_FSM_update+0x23c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <adxl345_FSM_update+0x240>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	460b      	mov	r3, r1
 8003f46:	4915      	ldr	r1, [pc, #84]	; (8003f9c <adxl345_FSM_update+0x244>)
 8003f48:	4815      	ldr	r0, [pc, #84]	; (8003fa0 <adxl345_FSM_update+0x248>)
 8003f4a:	f000 f995 	bl	8004278 <siprintf>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <adxl345_FSM_update+0x238>)
 8003f54:	801a      	strh	r2, [r3, #0]
							acc_Range,acc_Rate );
			uartSendStringSize((uint8_t*) serial_bufferTx, cont_txtBuffer);
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <adxl345_FSM_update+0x238>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4810      	ldr	r0, [pc, #64]	; (8003fa0 <adxl345_FSM_update+0x248>)
 8003f5e:	f7fc fdc5 	bl	8000aec <uartSendStringSize>
			curr_tpState = SAMPLING;
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <adxl345_FSM_update+0x224>)
 8003f64:	2203      	movs	r2, #3
 8003f66:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2500);
 8003f68:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003f6c:	f7fd f91a 	bl	80011a4 <HAL_Delay>
		}

		break;
 8003f70:	e06d      	b.n	800404e <adxl345_FSM_update+0x2f6>
 8003f72:	bf00      	nop
 8003f74:	20000580 	.word	0x20000580
 8003f78:	20000982 	.word	0x20000982
 8003f7c:	20000168 	.word	0x20000168
 8003f80:	20000169 	.word	0x20000169
 8003f84:	08004b94 	.word	0x08004b94
 8003f88:	2000001c 	.word	0x2000001c
 8003f8c:	08004ba4 	.word	0x08004ba4
 8003f90:	20000980 	.word	0x20000980
 8003f94:	20000178 	.word	0x20000178
 8003f98:	20000179 	.word	0x20000179
 8003f9c:	08004bb4 	.word	0x08004bb4
 8003fa0:	20000180 	.word	0x20000180

	case SAMPLING:
		if (prev_tpState != curr_tpState) {
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <adxl345_FSM_update+0x304>)
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <adxl345_FSM_update+0x308>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d00b      	beq.n	8003fc8 <adxl345_FSM_update+0x270>
			uartsendString((uint8_t*) "\nSampling State\r\n");
 8003fb0:	482c      	ldr	r0, [pc, #176]	; (8004064 <adxl345_FSM_update+0x30c>)
 8003fb2:	f7fc fd71 	bl	8000a98 <uartsendString>
			prev_tpState = curr_tpState;
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <adxl345_FSM_update+0x308>)
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <adxl345_FSM_update+0x304>)
 8003fbc:	701a      	strb	r2, [r3, #0]
			BSP_LEDs_On(false,false,false);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fc fc52 	bl	800086c <BSP_LEDs_On>

		/**
		 * Get and visualize values from axis (X,Y,Z)
		 * in decimal base, negative or positive.
		 */
		if (delayRead(&accSample_delay)) {
 8003fc8:	4827      	ldr	r0, [pc, #156]	; (8004068 <adxl345_FSM_update+0x310>)
 8003fca:	f7fc fbc4 	bl	8000756 <delayRead>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02a      	beq.n	800402a <adxl345_FSM_update+0x2d2>
			delayRead(&accSample_delay);
 8003fd4:	4824      	ldr	r0, [pc, #144]	; (8004068 <adxl345_FSM_update+0x310>)
 8003fd6:	f7fc fbbe 	bl	8000756 <delayRead>
			adxl345_getVals(&val_axisX, &val_axisY, &val_axisZ);
 8003fda:	4a24      	ldr	r2, [pc, #144]	; (800406c <adxl345_FSM_update+0x314>)
 8003fdc:	4924      	ldr	r1, [pc, #144]	; (8004070 <adxl345_FSM_update+0x318>)
 8003fde:	4825      	ldr	r0, [pc, #148]	; (8004074 <adxl345_FSM_update+0x31c>)
 8003fe0:	f7fc fe9e 	bl	8000d20 <adxl345_getVals>
			cont_txtBuffer = 0;
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <adxl345_FSM_update+0x320>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	801a      	strh	r2, [r3, #0]
			cont_txtBuffer = sprintf(serial_bufferTx,
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <adxl345_FSM_update+0x31c>)
 8003fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <adxl345_FSM_update+0x318>)
 8003ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <adxl345_FSM_update+0x314>)
 8003ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	460b      	mov	r3, r1
 8004004:	491d      	ldr	r1, [pc, #116]	; (800407c <adxl345_FSM_update+0x324>)
 8004006:	481e      	ldr	r0, [pc, #120]	; (8004080 <adxl345_FSM_update+0x328>)
 8004008:	f000 f936 	bl	8004278 <siprintf>
 800400c:	4603      	mov	r3, r0
 800400e:	b29a      	uxth	r2, r3
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <adxl345_FSM_update+0x320>)
 8004012:	801a      	strh	r2, [r3, #0]
					"\n Valor X = %d\t Valor Y = %d\t Valor Z = %d\t\r\n",
					val_axisX, val_axisY, val_axisZ);
			uartSendStringSize((uint8_t*) serial_bufferTx, cont_txtBuffer);
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <adxl345_FSM_update+0x320>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4819      	ldr	r0, [pc, #100]	; (8004080 <adxl345_FSM_update+0x328>)
 800401c:	f7fc fd66 	bl	8000aec <uartSendStringSize>

			BSP_LEDs_On(false,true,false);
 8004020:	2200      	movs	r2, #0
 8004022:	2101      	movs	r1, #1
 8004024:	2000      	movs	r0, #0
 8004026:	f7fc fc21 	bl	800086c <BSP_LEDs_On>
		}

		if (readKey())
 800402a:	f7fc fb67 	bl	80006fc <readKey>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <adxl345_FSM_update+0x2fa>
			curr_tpState = IDLE;
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <adxl345_FSM_update+0x308>)
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
		break;
 800403a:	e00a      	b.n	8004052 <adxl345_FSM_update+0x2fa>

	default:
		curr_tpState = IDLE;
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <adxl345_FSM_update+0x308>)
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
		adxl345_Enable(false);
 8004042:	2000      	movs	r0, #0
 8004044:	f7fc fdc8 	bl	8000bd8 <adxl345_Enable>
		break;
 8004048:	e004      	b.n	8004054 <adxl345_FSM_update+0x2fc>
		break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <adxl345_FSM_update+0x2fc>
		break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <adxl345_FSM_update+0x2fc>
		break;
 8004052:	bf00      	nop
	}
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000169 	.word	0x20000169
 8004060:	20000168 	.word	0x20000168
 8004064:	08004bec 	.word	0x08004bec
 8004068:	2000016c 	.word	0x2000016c
 800406c:	2000017e 	.word	0x2000017e
 8004070:	2000017c 	.word	0x2000017c
 8004074:	2000017a 	.word	0x2000017a
 8004078:	20000980 	.word	0x20000980
 800407c:	08004c00 	.word	0x08004c00
 8004080:	20000180 	.word	0x20000180

08004084 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 8004088:	f7fd f820 	bl	80010cc <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800408c:	f000 f836 	bl	80040fc <SystemClock_Config>

	/* Init Leds */
	BSP_LED_Init(LED1);
 8004090:	2000      	movs	r0, #0
 8004092:	f7fc fe91 	bl	8000db8 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8004096:	2001      	movs	r0, #1
 8004098:	f7fc fe8e 	bl	8000db8 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800409c:	2002      	movs	r0, #2
 800409e:	f7fc fe8b 	bl	8000db8 <BSP_LED_Init>
	// Init PushButton
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO); //
 80040a2:	2100      	movs	r1, #0
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7fc ff0b 	bl	8000ec0 <BSP_PB_Init>

	BSP_LEDs_On(false, false, false);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	2000      	movs	r0, #0
 80040b0:	f7fc fbdc 	bl	800086c <BSP_LEDs_On>
	uartinit();
 80040b4:	f7fc fcc4 	bl	8000a40 <uartinit>
	if (!i2cinit()) {
 80040b8:	f7fc fc04 	bl	80008c4 <i2cinit>
 80040bc:	4603      	mov	r3, r0
 80040be:	f083 0301 	eor.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <main+0x48>
		Error_Handler();
 80040c8:	f000 f87a 	bl	80041c0 <Error_Handler>
	}

	if (!gpiosinit()) {	//!< Initialize GPIO for I2C
 80040cc:	f7fc fb80 	bl	80007d0 <gpiosinit>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f083 0301 	eor.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <main+0x5c>
		Error_Handler();
 80040dc:	f000 f870 	bl	80041c0 <Error_Handler>
	}

	debounceFSM_init();	//!< DEBOUNCE USER BUTTON on NUCLEO-144
 80040e0:	f7fc fa68 	bl	80005b4 <debounceFSM_init>
	adxl345_FSM_init();
 80040e4:	f7ff fe10 	bl	8003d08 <adxl345_FSM_init>

	/**
	 * Notifies the start of the application through the serial port
	 */
	uartsendString((uint8_t*) "Start Application\r\n");
 80040e8:	4803      	ldr	r0, [pc, #12]	; (80040f8 <main+0x74>)
 80040ea:	f7fc fcd5 	bl	8000a98 <uartsendString>

	while (1) {

		debounceFSM_update();	//!<	Check USER BUTTON
 80040ee:	f7fc fa75 	bl	80005dc <debounceFSM_update>

		adxl345_FSM_update();			//!<	Run FSM adxl345
 80040f2:	f7ff fe31 	bl	8003d58 <adxl345_FSM_update>
		debounceFSM_update();	//!<	Check USER BUTTON
 80040f6:	e7fa      	b.n	80040ee <main+0x6a>
 80040f8:	08004c30 	.word	0x08004c30

080040fc <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b094      	sub	sp, #80	; 0x50
 8004100:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <SystemClock_Config+0xbc>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <SystemClock_Config+0xbc>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <SystemClock_Config+0xbc>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is 
	 clocked below the maximum system frequency, to update the voltage scaling value 
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <SystemClock_Config+0xc0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a25      	ldr	r2, [pc, #148]	; (80041bc <SystemClock_Config+0xc0>)
 8004128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <SystemClock_Config+0xc0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800413a:	2301      	movs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800413e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004142:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004144:	2302      	movs	r3, #2
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800414e:	2308      	movs	r3, #8
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8004152:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004158:	2302      	movs	r3, #2
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800415c:	2307      	movs	r3, #7
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fcd3 	bl	8002b10 <HAL_RCC_OscConfig>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8004170:	f000 f826 	bl	80041c0 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004174:	f7fe fc7c 	bl	8002a70 <HAL_PWREx_EnableOverDrive>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 800417e:	f000 f81f 	bl	80041c0 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8004182:	230f      	movs	r3, #15
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004186:	2302      	movs	r3, #2
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800418a:	2300      	movs	r3, #0
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800418e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004192:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004198:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800419a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800419e:	2105      	movs	r1, #5
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe ff2d 	bl	8003000 <HAL_RCC_ClockConfig>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 80041ac:	f000 f808 	bl	80041c0 <Error_Handler>
	}
}
 80041b0:	bf00      	nop
 80041b2:	3750      	adds	r7, #80	; 0x50
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000

080041c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED3);
 80041c4:	2002      	movs	r0, #2
 80041c6:	f7fc fe47 	bl	8000e58 <BSP_LED_On>
  __ASM volatile ("cpsid i" : : : "memory");
 80041ca:	b672      	cpsid	i
}
 80041cc:	bf00      	nop
	__disable_irq();
	while (1) {
 80041ce:	e7fe      	b.n	80041ce <Error_Handler+0xe>

080041d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80041d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004208 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041d6:	e003      	b.n	80041e0 <LoopCopyDataInit>

080041d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041de:	3104      	adds	r1, #4

080041e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041e0:	480b      	ldr	r0, [pc, #44]	; (8004210 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041e8:	d3f6      	bcc.n	80041d8 <CopyDataInit>
  ldr  r2, =_sbss
 80041ea:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041ec:	e002      	b.n	80041f4 <LoopFillZerobss>

080041ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041f0:	f842 3b04 	str.w	r3, [r2], #4

080041f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041f8:	d3f9      	bcc.n	80041ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041fa:	f7fc fecd 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041fe:	f000 f817 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004202:	f7ff ff3f 	bl	8004084 <main>
  bx  lr    
 8004206:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004208:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800420c:	08004ca8 	.word	0x08004ca8
  ldr  r0, =_sdata
 8004210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004214:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004218:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800421c:	20000994 	.word	0x20000994

08004220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004220:	e7fe      	b.n	8004220 <ADC_IRQHandler>
	...

08004224 <__errno>:
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <__errno+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000028 	.word	0x20000028

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 fc86 	bl	8004b54 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	08004ca0 	.word	0x08004ca0
 800426c:	08004ca0 	.word	0x08004ca0
 8004270:	08004ca0 	.word	0x08004ca0
 8004274:	08004ca4 	.word	0x08004ca4

08004278 <siprintf>:
 8004278:	b40e      	push	{r1, r2, r3}
 800427a:	b500      	push	{lr}
 800427c:	b09c      	sub	sp, #112	; 0x70
 800427e:	ab1d      	add	r3, sp, #116	; 0x74
 8004280:	9002      	str	r0, [sp, #8]
 8004282:	9006      	str	r0, [sp, #24]
 8004284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004288:	4809      	ldr	r0, [pc, #36]	; (80042b0 <siprintf+0x38>)
 800428a:	9107      	str	r1, [sp, #28]
 800428c:	9104      	str	r1, [sp, #16]
 800428e:	4909      	ldr	r1, [pc, #36]	; (80042b4 <siprintf+0x3c>)
 8004290:	f853 2b04 	ldr.w	r2, [r3], #4
 8004294:	9105      	str	r1, [sp, #20]
 8004296:	6800      	ldr	r0, [r0, #0]
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	a902      	add	r1, sp, #8
 800429c:	f000 f868 	bl	8004370 <_svfiprintf_r>
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	b01c      	add	sp, #112	; 0x70
 80042a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042ac:	b003      	add	sp, #12
 80042ae:	4770      	bx	lr
 80042b0:	20000028 	.word	0x20000028
 80042b4:	ffff0208 	.word	0xffff0208

080042b8 <__ssputs_r>:
 80042b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	688e      	ldr	r6, [r1, #8]
 80042be:	429e      	cmp	r6, r3
 80042c0:	4682      	mov	sl, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	4690      	mov	r8, r2
 80042c6:	461f      	mov	r7, r3
 80042c8:	d838      	bhi.n	800433c <__ssputs_r+0x84>
 80042ca:	898a      	ldrh	r2, [r1, #12]
 80042cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042d0:	d032      	beq.n	8004338 <__ssputs_r+0x80>
 80042d2:	6825      	ldr	r5, [r4, #0]
 80042d4:	6909      	ldr	r1, [r1, #16]
 80042d6:	eba5 0901 	sub.w	r9, r5, r1
 80042da:	6965      	ldr	r5, [r4, #20]
 80042dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042e4:	3301      	adds	r3, #1
 80042e6:	444b      	add	r3, r9
 80042e8:	106d      	asrs	r5, r5, #1
 80042ea:	429d      	cmp	r5, r3
 80042ec:	bf38      	it	cc
 80042ee:	461d      	movcc	r5, r3
 80042f0:	0553      	lsls	r3, r2, #21
 80042f2:	d531      	bpl.n	8004358 <__ssputs_r+0xa0>
 80042f4:	4629      	mov	r1, r5
 80042f6:	f000 fb63 	bl	80049c0 <_malloc_r>
 80042fa:	4606      	mov	r6, r0
 80042fc:	b950      	cbnz	r0, 8004314 <__ssputs_r+0x5c>
 80042fe:	230c      	movs	r3, #12
 8004300:	f8ca 3000 	str.w	r3, [sl]
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004314:	6921      	ldr	r1, [r4, #16]
 8004316:	464a      	mov	r2, r9
 8004318:	f000 fabe 	bl	8004898 <memcpy>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	6126      	str	r6, [r4, #16]
 800432a:	6165      	str	r5, [r4, #20]
 800432c:	444e      	add	r6, r9
 800432e:	eba5 0509 	sub.w	r5, r5, r9
 8004332:	6026      	str	r6, [r4, #0]
 8004334:	60a5      	str	r5, [r4, #8]
 8004336:	463e      	mov	r6, r7
 8004338:	42be      	cmp	r6, r7
 800433a:	d900      	bls.n	800433e <__ssputs_r+0x86>
 800433c:	463e      	mov	r6, r7
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	4632      	mov	r2, r6
 8004342:	4641      	mov	r1, r8
 8004344:	f000 fab6 	bl	80048b4 <memmove>
 8004348:	68a3      	ldr	r3, [r4, #8]
 800434a:	1b9b      	subs	r3, r3, r6
 800434c:	60a3      	str	r3, [r4, #8]
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	4433      	add	r3, r6
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	2000      	movs	r0, #0
 8004356:	e7db      	b.n	8004310 <__ssputs_r+0x58>
 8004358:	462a      	mov	r2, r5
 800435a:	f000 fba5 	bl	8004aa8 <_realloc_r>
 800435e:	4606      	mov	r6, r0
 8004360:	2800      	cmp	r0, #0
 8004362:	d1e1      	bne.n	8004328 <__ssputs_r+0x70>
 8004364:	6921      	ldr	r1, [r4, #16]
 8004366:	4650      	mov	r0, sl
 8004368:	f000 fabe 	bl	80048e8 <_free_r>
 800436c:	e7c7      	b.n	80042fe <__ssputs_r+0x46>
	...

08004370 <_svfiprintf_r>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	4698      	mov	r8, r3
 8004376:	898b      	ldrh	r3, [r1, #12]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	b09d      	sub	sp, #116	; 0x74
 800437c:	4607      	mov	r7, r0
 800437e:	460d      	mov	r5, r1
 8004380:	4614      	mov	r4, r2
 8004382:	d50e      	bpl.n	80043a2 <_svfiprintf_r+0x32>
 8004384:	690b      	ldr	r3, [r1, #16]
 8004386:	b963      	cbnz	r3, 80043a2 <_svfiprintf_r+0x32>
 8004388:	2140      	movs	r1, #64	; 0x40
 800438a:	f000 fb19 	bl	80049c0 <_malloc_r>
 800438e:	6028      	str	r0, [r5, #0]
 8004390:	6128      	str	r0, [r5, #16]
 8004392:	b920      	cbnz	r0, 800439e <_svfiprintf_r+0x2e>
 8004394:	230c      	movs	r3, #12
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800439c:	e0d1      	b.n	8004542 <_svfiprintf_r+0x1d2>
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	616b      	str	r3, [r5, #20]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9309      	str	r3, [sp, #36]	; 0x24
 80043a6:	2320      	movs	r3, #32
 80043a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80043b0:	2330      	movs	r3, #48	; 0x30
 80043b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800455c <_svfiprintf_r+0x1ec>
 80043b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ba:	f04f 0901 	mov.w	r9, #1
 80043be:	4623      	mov	r3, r4
 80043c0:	469a      	mov	sl, r3
 80043c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c6:	b10a      	cbz	r2, 80043cc <_svfiprintf_r+0x5c>
 80043c8:	2a25      	cmp	r2, #37	; 0x25
 80043ca:	d1f9      	bne.n	80043c0 <_svfiprintf_r+0x50>
 80043cc:	ebba 0b04 	subs.w	fp, sl, r4
 80043d0:	d00b      	beq.n	80043ea <_svfiprintf_r+0x7a>
 80043d2:	465b      	mov	r3, fp
 80043d4:	4622      	mov	r2, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	4638      	mov	r0, r7
 80043da:	f7ff ff6d 	bl	80042b8 <__ssputs_r>
 80043de:	3001      	adds	r0, #1
 80043e0:	f000 80aa 	beq.w	8004538 <_svfiprintf_r+0x1c8>
 80043e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043e6:	445a      	add	r2, fp
 80043e8:	9209      	str	r2, [sp, #36]	; 0x24
 80043ea:	f89a 3000 	ldrb.w	r3, [sl]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a2 	beq.w	8004538 <_svfiprintf_r+0x1c8>
 80043f4:	2300      	movs	r3, #0
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043fe:	f10a 0a01 	add.w	sl, sl, #1
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	9307      	str	r3, [sp, #28]
 8004406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800440a:	931a      	str	r3, [sp, #104]	; 0x68
 800440c:	4654      	mov	r4, sl
 800440e:	2205      	movs	r2, #5
 8004410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004414:	4851      	ldr	r0, [pc, #324]	; (800455c <_svfiprintf_r+0x1ec>)
 8004416:	f7fb fefb 	bl	8000210 <memchr>
 800441a:	9a04      	ldr	r2, [sp, #16]
 800441c:	b9d8      	cbnz	r0, 8004456 <_svfiprintf_r+0xe6>
 800441e:	06d0      	lsls	r0, r2, #27
 8004420:	bf44      	itt	mi
 8004422:	2320      	movmi	r3, #32
 8004424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004428:	0711      	lsls	r1, r2, #28
 800442a:	bf44      	itt	mi
 800442c:	232b      	movmi	r3, #43	; 0x2b
 800442e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004432:	f89a 3000 	ldrb.w	r3, [sl]
 8004436:	2b2a      	cmp	r3, #42	; 0x2a
 8004438:	d015      	beq.n	8004466 <_svfiprintf_r+0xf6>
 800443a:	9a07      	ldr	r2, [sp, #28]
 800443c:	4654      	mov	r4, sl
 800443e:	2000      	movs	r0, #0
 8004440:	f04f 0c0a 	mov.w	ip, #10
 8004444:	4621      	mov	r1, r4
 8004446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800444a:	3b30      	subs	r3, #48	; 0x30
 800444c:	2b09      	cmp	r3, #9
 800444e:	d94e      	bls.n	80044ee <_svfiprintf_r+0x17e>
 8004450:	b1b0      	cbz	r0, 8004480 <_svfiprintf_r+0x110>
 8004452:	9207      	str	r2, [sp, #28]
 8004454:	e014      	b.n	8004480 <_svfiprintf_r+0x110>
 8004456:	eba0 0308 	sub.w	r3, r0, r8
 800445a:	fa09 f303 	lsl.w	r3, r9, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	9304      	str	r3, [sp, #16]
 8004462:	46a2      	mov	sl, r4
 8004464:	e7d2      	b.n	800440c <_svfiprintf_r+0x9c>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	1d19      	adds	r1, r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	9103      	str	r1, [sp, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfbb      	ittet	lt
 8004472:	425b      	neglt	r3, r3
 8004474:	f042 0202 	orrlt.w	r2, r2, #2
 8004478:	9307      	strge	r3, [sp, #28]
 800447a:	9307      	strlt	r3, [sp, #28]
 800447c:	bfb8      	it	lt
 800447e:	9204      	strlt	r2, [sp, #16]
 8004480:	7823      	ldrb	r3, [r4, #0]
 8004482:	2b2e      	cmp	r3, #46	; 0x2e
 8004484:	d10c      	bne.n	80044a0 <_svfiprintf_r+0x130>
 8004486:	7863      	ldrb	r3, [r4, #1]
 8004488:	2b2a      	cmp	r3, #42	; 0x2a
 800448a:	d135      	bne.n	80044f8 <_svfiprintf_r+0x188>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	9203      	str	r2, [sp, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	bfb8      	it	lt
 8004498:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800449c:	3402      	adds	r4, #2
 800449e:	9305      	str	r3, [sp, #20]
 80044a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800456c <_svfiprintf_r+0x1fc>
 80044a4:	7821      	ldrb	r1, [r4, #0]
 80044a6:	2203      	movs	r2, #3
 80044a8:	4650      	mov	r0, sl
 80044aa:	f7fb feb1 	bl	8000210 <memchr>
 80044ae:	b140      	cbz	r0, 80044c2 <_svfiprintf_r+0x152>
 80044b0:	2340      	movs	r3, #64	; 0x40
 80044b2:	eba0 000a 	sub.w	r0, r0, sl
 80044b6:	fa03 f000 	lsl.w	r0, r3, r0
 80044ba:	9b04      	ldr	r3, [sp, #16]
 80044bc:	4303      	orrs	r3, r0
 80044be:	3401      	adds	r4, #1
 80044c0:	9304      	str	r3, [sp, #16]
 80044c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c6:	4826      	ldr	r0, [pc, #152]	; (8004560 <_svfiprintf_r+0x1f0>)
 80044c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044cc:	2206      	movs	r2, #6
 80044ce:	f7fb fe9f 	bl	8000210 <memchr>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d038      	beq.n	8004548 <_svfiprintf_r+0x1d8>
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <_svfiprintf_r+0x1f4>)
 80044d8:	bb1b      	cbnz	r3, 8004522 <_svfiprintf_r+0x1b2>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	3307      	adds	r3, #7
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	3308      	adds	r3, #8
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	4433      	add	r3, r6
 80044ea:	9309      	str	r3, [sp, #36]	; 0x24
 80044ec:	e767      	b.n	80043be <_svfiprintf_r+0x4e>
 80044ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f2:	460c      	mov	r4, r1
 80044f4:	2001      	movs	r0, #1
 80044f6:	e7a5      	b.n	8004444 <_svfiprintf_r+0xd4>
 80044f8:	2300      	movs	r3, #0
 80044fa:	3401      	adds	r4, #1
 80044fc:	9305      	str	r3, [sp, #20]
 80044fe:	4619      	mov	r1, r3
 8004500:	f04f 0c0a 	mov.w	ip, #10
 8004504:	4620      	mov	r0, r4
 8004506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800450a:	3a30      	subs	r2, #48	; 0x30
 800450c:	2a09      	cmp	r2, #9
 800450e:	d903      	bls.n	8004518 <_svfiprintf_r+0x1a8>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0c5      	beq.n	80044a0 <_svfiprintf_r+0x130>
 8004514:	9105      	str	r1, [sp, #20]
 8004516:	e7c3      	b.n	80044a0 <_svfiprintf_r+0x130>
 8004518:	fb0c 2101 	mla	r1, ip, r1, r2
 800451c:	4604      	mov	r4, r0
 800451e:	2301      	movs	r3, #1
 8004520:	e7f0      	b.n	8004504 <_svfiprintf_r+0x194>
 8004522:	ab03      	add	r3, sp, #12
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	462a      	mov	r2, r5
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <_svfiprintf_r+0x1f8>)
 800452a:	a904      	add	r1, sp, #16
 800452c:	4638      	mov	r0, r7
 800452e:	f3af 8000 	nop.w
 8004532:	1c42      	adds	r2, r0, #1
 8004534:	4606      	mov	r6, r0
 8004536:	d1d6      	bne.n	80044e6 <_svfiprintf_r+0x176>
 8004538:	89ab      	ldrh	r3, [r5, #12]
 800453a:	065b      	lsls	r3, r3, #25
 800453c:	f53f af2c 	bmi.w	8004398 <_svfiprintf_r+0x28>
 8004540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004542:	b01d      	add	sp, #116	; 0x74
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	ab03      	add	r3, sp, #12
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	462a      	mov	r2, r5
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <_svfiprintf_r+0x1f8>)
 8004550:	a904      	add	r1, sp, #16
 8004552:	4638      	mov	r0, r7
 8004554:	f000 f87a 	bl	800464c <_printf_i>
 8004558:	e7eb      	b.n	8004532 <_svfiprintf_r+0x1c2>
 800455a:	bf00      	nop
 800455c:	08004c64 	.word	0x08004c64
 8004560:	08004c6e 	.word	0x08004c6e
 8004564:	00000000 	.word	0x00000000
 8004568:	080042b9 	.word	0x080042b9
 800456c:	08004c6a 	.word	0x08004c6a

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4699      	mov	r9, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800458c:	4607      	mov	r7, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc26      	bgt.n	8004606 <_printf_common+0x96>
 80045b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045bc:	1e13      	subs	r3, r2, #0
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d42b      	bmi.n	8004620 <_printf_common+0xb0>
 80045c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045cc:	4649      	mov	r1, r9
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d01e      	beq.n	8004614 <_printf_common+0xa4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	68e5      	ldr	r5, [r4, #12]
 80045da:	6832      	ldr	r2, [r6, #0]
 80045dc:	f003 0306 	and.w	r3, r3, #6
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	bf08      	it	eq
 80045e4:	1aad      	subeq	r5, r5, r2
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	2600      	movs	r6, #0
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xc8>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xa8>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4649      	mov	r1, r9
 800460c:	4638      	mov	r0, r7
 800460e:	47c0      	blx	r8
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xac>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c6      	b.n	80045ae <_printf_common+0x3e>
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	2030      	movs	r0, #48	; 0x30
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462a:	4422      	add	r2, r4
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004634:	3302      	adds	r3, #2
 8004636:	e7c7      	b.n	80045c8 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa4>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x8e>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004654:	2f78      	cmp	r7, #120	; 0x78
 8004656:	4691      	mov	r9, r2
 8004658:	4680      	mov	r8, r0
 800465a:	460c      	mov	r4, r1
 800465c:	469a      	mov	sl, r3
 800465e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d8 	beq.w	800481e <_printf_i+0x1d2>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80a3 	beq.w	80047ba <_printf_i+0x16e>
 8004674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	; (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	08004805 	.word	0x08004805
 80046bc:	08004729 	.word	0x08004729
 80046c0:	080047e7 	.word	0x080047e7
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004827 	.word	0x08004827
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047ef 	.word	0x080047ef
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	602a      	str	r2, [r5, #0]
 80046ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a3      	b.n	8004840 <_printf_i+0x1f4>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	6829      	ldr	r1, [r5, #0]
 80046fc:	0606      	lsls	r6, r0, #24
 80046fe:	f101 0304 	add.w	r3, r1, #4
 8004702:	d50a      	bpl.n	800471a <_printf_i+0xce>
 8004704:	680e      	ldr	r6, [r1, #0]
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	2e00      	cmp	r6, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xc8>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	4276      	negs	r6, r6
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004714:	485e      	ldr	r0, [pc, #376]	; (8004890 <_printf_i+0x244>)
 8004716:	230a      	movs	r3, #10
 8004718:	e019      	b.n	800474e <_printf_i+0x102>
 800471a:	680e      	ldr	r6, [r1, #0]
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004722:	bf18      	it	ne
 8004724:	b236      	sxthne	r6, r6
 8004726:	e7ef      	b.n	8004708 <_printf_i+0xbc>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6029      	str	r1, [r5, #0]
 8004730:	0601      	lsls	r1, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xec>
 8004734:	681e      	ldr	r6, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xf2>
 8004738:	0646      	lsls	r6, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe8>
 800473c:	881e      	ldrh	r6, [r3, #0]
 800473e:	4854      	ldr	r0, [pc, #336]	; (8004890 <_printf_i+0x244>)
 8004740:	2f6f      	cmp	r7, #111	; 0x6f
 8004742:	bf0c      	ite	eq
 8004744:	2308      	moveq	r3, #8
 8004746:	230a      	movne	r3, #10
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6865      	ldr	r5, [r4, #4]
 8004750:	60a5      	str	r5, [r4, #8]
 8004752:	2d00      	cmp	r5, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90e      	cbnz	r6, 8004764 <_printf_i+0x118>
 8004760:	2d00      	cmp	r5, #0
 8004762:	d04d      	beq.n	8004800 <_printf_i+0x1b4>
 8004764:	4615      	mov	r5, r2
 8004766:	fbb6 f1f3 	udiv	r1, r6, r3
 800476a:	fb03 6711 	mls	r7, r3, r1, r6
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004774:	4637      	mov	r7, r6
 8004776:	42bb      	cmp	r3, r7
 8004778:	460e      	mov	r6, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x11a>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x14c>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07de      	lsls	r6, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x14c>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	; 0x30
 8004790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004794:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004798:	1b52      	subs	r2, r2, r5
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee2 	bl	8004570 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14c      	bne.n	800484a <_printf_i+0x1fe>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	4835      	ldr	r0, [pc, #212]	; (8004890 <_printf_i+0x244>)
 80047bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047c0:	6829      	ldr	r1, [r5, #0]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047c8:	6029      	str	r1, [r5, #0]
 80047ca:	061d      	lsls	r5, r3, #24
 80047cc:	d514      	bpl.n	80047f8 <_printf_i+0x1ac>
 80047ce:	07df      	lsls	r7, r3, #31
 80047d0:	bf44      	itt	mi
 80047d2:	f043 0320 	orrmi.w	r3, r3, #32
 80047d6:	6023      	strmi	r3, [r4, #0]
 80047d8:	b91e      	cbnz	r6, 80047e2 <_printf_i+0x196>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f023 0320 	bic.w	r3, r3, #32
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	2310      	movs	r3, #16
 80047e4:	e7b0      	b.n	8004748 <_printf_i+0xfc>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	2378      	movs	r3, #120	; 0x78
 80047f0:	4828      	ldr	r0, [pc, #160]	; (8004894 <_printf_i+0x248>)
 80047f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f6:	e7e3      	b.n	80047c0 <_printf_i+0x174>
 80047f8:	0659      	lsls	r1, r3, #25
 80047fa:	bf48      	it	mi
 80047fc:	b2b6      	uxthmi	r6, r6
 80047fe:	e7e6      	b.n	80047ce <_printf_i+0x182>
 8004800:	4615      	mov	r5, r2
 8004802:	e7bb      	b.n	800477c <_printf_i+0x130>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	6826      	ldr	r6, [r4, #0]
 8004808:	6961      	ldr	r1, [r4, #20]
 800480a:	1d18      	adds	r0, r3, #4
 800480c:	6028      	str	r0, [r5, #0]
 800480e:	0635      	lsls	r5, r6, #24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	d501      	bpl.n	8004818 <_printf_i+0x1cc>
 8004814:	6019      	str	r1, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0x1d2>
 8004818:	0670      	lsls	r0, r6, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0x1c8>
 800481c:	8019      	strh	r1, [r3, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	4615      	mov	r5, r2
 8004824:	e7ba      	b.n	800479c <_printf_i+0x150>
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	602a      	str	r2, [r5, #0]
 800482c:	681d      	ldr	r5, [r3, #0]
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	2100      	movs	r1, #0
 8004832:	4628      	mov	r0, r5
 8004834:	f7fb fcec 	bl	8000210 <memchr>
 8004838:	b108      	cbz	r0, 800483e <_printf_i+0x1f2>
 800483a:	1b40      	subs	r0, r0, r5
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	2300      	movs	r3, #0
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004848:	e7a8      	b.n	800479c <_printf_i+0x150>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	462a      	mov	r2, r5
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d0ab      	beq.n	80047b0 <_printf_i+0x164>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	079b      	lsls	r3, r3, #30
 800485c:	d413      	bmi.n	8004886 <_printf_i+0x23a>
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	4298      	cmp	r0, r3
 8004864:	bfb8      	it	lt
 8004866:	4618      	movlt	r0, r3
 8004868:	e7a4      	b.n	80047b4 <_printf_i+0x168>
 800486a:	2301      	movs	r3, #1
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d09b      	beq.n	80047b0 <_printf_i+0x164>
 8004878:	3501      	adds	r5, #1
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	9903      	ldr	r1, [sp, #12]
 800487e:	1a5b      	subs	r3, r3, r1
 8004880:	42ab      	cmp	r3, r5
 8004882:	dcf2      	bgt.n	800486a <_printf_i+0x21e>
 8004884:	e7eb      	b.n	800485e <_printf_i+0x212>
 8004886:	2500      	movs	r5, #0
 8004888:	f104 0619 	add.w	r6, r4, #25
 800488c:	e7f5      	b.n	800487a <_printf_i+0x22e>
 800488e:	bf00      	nop
 8004890:	08004c75 	.word	0x08004c75
 8004894:	08004c86 	.word	0x08004c86

08004898 <memcpy>:
 8004898:	440a      	add	r2, r1
 800489a:	4291      	cmp	r1, r2
 800489c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80048a0:	d100      	bne.n	80048a4 <memcpy+0xc>
 80048a2:	4770      	bx	lr
 80048a4:	b510      	push	{r4, lr}
 80048a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ae:	4291      	cmp	r1, r2
 80048b0:	d1f9      	bne.n	80048a6 <memcpy+0xe>
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <memmove>:
 80048b4:	4288      	cmp	r0, r1
 80048b6:	b510      	push	{r4, lr}
 80048b8:	eb01 0402 	add.w	r4, r1, r2
 80048bc:	d902      	bls.n	80048c4 <memmove+0x10>
 80048be:	4284      	cmp	r4, r0
 80048c0:	4623      	mov	r3, r4
 80048c2:	d807      	bhi.n	80048d4 <memmove+0x20>
 80048c4:	1e43      	subs	r3, r0, #1
 80048c6:	42a1      	cmp	r1, r4
 80048c8:	d008      	beq.n	80048dc <memmove+0x28>
 80048ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d2:	e7f8      	b.n	80048c6 <memmove+0x12>
 80048d4:	4402      	add	r2, r0
 80048d6:	4601      	mov	r1, r0
 80048d8:	428a      	cmp	r2, r1
 80048da:	d100      	bne.n	80048de <memmove+0x2a>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048e6:	e7f7      	b.n	80048d8 <memmove+0x24>

080048e8 <_free_r>:
 80048e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ea:	2900      	cmp	r1, #0
 80048ec:	d044      	beq.n	8004978 <_free_r+0x90>
 80048ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f2:	9001      	str	r0, [sp, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f1a1 0404 	sub.w	r4, r1, #4
 80048fa:	bfb8      	it	lt
 80048fc:	18e4      	addlt	r4, r4, r3
 80048fe:	f000 f913 	bl	8004b28 <__malloc_lock>
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <_free_r+0x94>)
 8004904:	9801      	ldr	r0, [sp, #4]
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	b933      	cbnz	r3, 8004918 <_free_r+0x30>
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	6014      	str	r4, [r2, #0]
 800490e:	b003      	add	sp, #12
 8004910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004914:	f000 b90e 	b.w	8004b34 <__malloc_unlock>
 8004918:	42a3      	cmp	r3, r4
 800491a:	d908      	bls.n	800492e <_free_r+0x46>
 800491c:	6825      	ldr	r5, [r4, #0]
 800491e:	1961      	adds	r1, r4, r5
 8004920:	428b      	cmp	r3, r1
 8004922:	bf01      	itttt	eq
 8004924:	6819      	ldreq	r1, [r3, #0]
 8004926:	685b      	ldreq	r3, [r3, #4]
 8004928:	1949      	addeq	r1, r1, r5
 800492a:	6021      	streq	r1, [r4, #0]
 800492c:	e7ed      	b.n	800490a <_free_r+0x22>
 800492e:	461a      	mov	r2, r3
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b10b      	cbz	r3, 8004938 <_free_r+0x50>
 8004934:	42a3      	cmp	r3, r4
 8004936:	d9fa      	bls.n	800492e <_free_r+0x46>
 8004938:	6811      	ldr	r1, [r2, #0]
 800493a:	1855      	adds	r5, r2, r1
 800493c:	42a5      	cmp	r5, r4
 800493e:	d10b      	bne.n	8004958 <_free_r+0x70>
 8004940:	6824      	ldr	r4, [r4, #0]
 8004942:	4421      	add	r1, r4
 8004944:	1854      	adds	r4, r2, r1
 8004946:	42a3      	cmp	r3, r4
 8004948:	6011      	str	r1, [r2, #0]
 800494a:	d1e0      	bne.n	800490e <_free_r+0x26>
 800494c:	681c      	ldr	r4, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	6053      	str	r3, [r2, #4]
 8004952:	4421      	add	r1, r4
 8004954:	6011      	str	r1, [r2, #0]
 8004956:	e7da      	b.n	800490e <_free_r+0x26>
 8004958:	d902      	bls.n	8004960 <_free_r+0x78>
 800495a:	230c      	movs	r3, #12
 800495c:	6003      	str	r3, [r0, #0]
 800495e:	e7d6      	b.n	800490e <_free_r+0x26>
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	1961      	adds	r1, r4, r5
 8004964:	428b      	cmp	r3, r1
 8004966:	bf04      	itt	eq
 8004968:	6819      	ldreq	r1, [r3, #0]
 800496a:	685b      	ldreq	r3, [r3, #4]
 800496c:	6063      	str	r3, [r4, #4]
 800496e:	bf04      	itt	eq
 8004970:	1949      	addeq	r1, r1, r5
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	6054      	str	r4, [r2, #4]
 8004976:	e7ca      	b.n	800490e <_free_r+0x26>
 8004978:	b003      	add	sp, #12
 800497a:	bd30      	pop	{r4, r5, pc}
 800497c:	20000984 	.word	0x20000984

08004980 <sbrk_aligned>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0e      	ldr	r6, [pc, #56]	; (80049bc <sbrk_aligned+0x3c>)
 8004984:	460c      	mov	r4, r1
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	4605      	mov	r5, r0
 800498a:	b911      	cbnz	r1, 8004992 <sbrk_aligned+0x12>
 800498c:	f000 f8bc 	bl	8004b08 <_sbrk_r>
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f8b7 	bl	8004b08 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d00a      	beq.n	80049b4 <sbrk_aligned+0x34>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d007      	beq.n	80049b8 <sbrk_aligned+0x38>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 f8ac 	bl	8004b08 <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d101      	bne.n	80049b8 <sbrk_aligned+0x38>
 80049b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80049b8:	4620      	mov	r0, r4
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	20000988 	.word	0x20000988

080049c0 <_malloc_r>:
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	1ccd      	adds	r5, r1, #3
 80049c6:	f025 0503 	bic.w	r5, r5, #3
 80049ca:	3508      	adds	r5, #8
 80049cc:	2d0c      	cmp	r5, #12
 80049ce:	bf38      	it	cc
 80049d0:	250c      	movcc	r5, #12
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	4607      	mov	r7, r0
 80049d6:	db01      	blt.n	80049dc <_malloc_r+0x1c>
 80049d8:	42a9      	cmp	r1, r5
 80049da:	d905      	bls.n	80049e8 <_malloc_r+0x28>
 80049dc:	230c      	movs	r3, #12
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	2600      	movs	r6, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e8:	4e2e      	ldr	r6, [pc, #184]	; (8004aa4 <_malloc_r+0xe4>)
 80049ea:	f000 f89d 	bl	8004b28 <__malloc_lock>
 80049ee:	6833      	ldr	r3, [r6, #0]
 80049f0:	461c      	mov	r4, r3
 80049f2:	bb34      	cbnz	r4, 8004a42 <_malloc_r+0x82>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ffc2 	bl	8004980 <sbrk_aligned>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	4604      	mov	r4, r0
 8004a00:	d14d      	bne.n	8004a9e <_malloc_r+0xde>
 8004a02:	6834      	ldr	r4, [r6, #0]
 8004a04:	4626      	mov	r6, r4
 8004a06:	2e00      	cmp	r6, #0
 8004a08:	d140      	bne.n	8004a8c <_malloc_r+0xcc>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4638      	mov	r0, r7
 8004a10:	eb04 0803 	add.w	r8, r4, r3
 8004a14:	f000 f878 	bl	8004b08 <_sbrk_r>
 8004a18:	4580      	cmp	r8, r0
 8004a1a:	d13a      	bne.n	8004a92 <_malloc_r+0xd2>
 8004a1c:	6821      	ldr	r1, [r4, #0]
 8004a1e:	3503      	adds	r5, #3
 8004a20:	1a6d      	subs	r5, r5, r1
 8004a22:	f025 0503 	bic.w	r5, r5, #3
 8004a26:	3508      	adds	r5, #8
 8004a28:	2d0c      	cmp	r5, #12
 8004a2a:	bf38      	it	cc
 8004a2c:	250c      	movcc	r5, #12
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4638      	mov	r0, r7
 8004a32:	f7ff ffa5 	bl	8004980 <sbrk_aligned>
 8004a36:	3001      	adds	r0, #1
 8004a38:	d02b      	beq.n	8004a92 <_malloc_r+0xd2>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	442b      	add	r3, r5
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	e00e      	b.n	8004a60 <_malloc_r+0xa0>
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	1b52      	subs	r2, r2, r5
 8004a46:	d41e      	bmi.n	8004a86 <_malloc_r+0xc6>
 8004a48:	2a0b      	cmp	r2, #11
 8004a4a:	d916      	bls.n	8004a7a <_malloc_r+0xba>
 8004a4c:	1961      	adds	r1, r4, r5
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	6025      	str	r5, [r4, #0]
 8004a52:	bf18      	it	ne
 8004a54:	6059      	strne	r1, [r3, #4]
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	bf08      	it	eq
 8004a5a:	6031      	streq	r1, [r6, #0]
 8004a5c:	5162      	str	r2, [r4, r5]
 8004a5e:	604b      	str	r3, [r1, #4]
 8004a60:	4638      	mov	r0, r7
 8004a62:	f104 060b 	add.w	r6, r4, #11
 8004a66:	f000 f865 	bl	8004b34 <__malloc_unlock>
 8004a6a:	f026 0607 	bic.w	r6, r6, #7
 8004a6e:	1d23      	adds	r3, r4, #4
 8004a70:	1af2      	subs	r2, r6, r3
 8004a72:	d0b6      	beq.n	80049e2 <_malloc_r+0x22>
 8004a74:	1b9b      	subs	r3, r3, r6
 8004a76:	50a3      	str	r3, [r4, r2]
 8004a78:	e7b3      	b.n	80049e2 <_malloc_r+0x22>
 8004a7a:	6862      	ldr	r2, [r4, #4]
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	bf0c      	ite	eq
 8004a80:	6032      	streq	r2, [r6, #0]
 8004a82:	605a      	strne	r2, [r3, #4]
 8004a84:	e7ec      	b.n	8004a60 <_malloc_r+0xa0>
 8004a86:	4623      	mov	r3, r4
 8004a88:	6864      	ldr	r4, [r4, #4]
 8004a8a:	e7b2      	b.n	80049f2 <_malloc_r+0x32>
 8004a8c:	4634      	mov	r4, r6
 8004a8e:	6876      	ldr	r6, [r6, #4]
 8004a90:	e7b9      	b.n	8004a06 <_malloc_r+0x46>
 8004a92:	230c      	movs	r3, #12
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4638      	mov	r0, r7
 8004a98:	f000 f84c 	bl	8004b34 <__malloc_unlock>
 8004a9c:	e7a1      	b.n	80049e2 <_malloc_r+0x22>
 8004a9e:	6025      	str	r5, [r4, #0]
 8004aa0:	e7de      	b.n	8004a60 <_malloc_r+0xa0>
 8004aa2:	bf00      	nop
 8004aa4:	20000984 	.word	0x20000984

08004aa8 <_realloc_r>:
 8004aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aac:	4680      	mov	r8, r0
 8004aae:	4614      	mov	r4, r2
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	b921      	cbnz	r1, 8004abe <_realloc_r+0x16>
 8004ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab8:	4611      	mov	r1, r2
 8004aba:	f7ff bf81 	b.w	80049c0 <_malloc_r>
 8004abe:	b92a      	cbnz	r2, 8004acc <_realloc_r+0x24>
 8004ac0:	f7ff ff12 	bl	80048e8 <_free_r>
 8004ac4:	4625      	mov	r5, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004acc:	f000 f838 	bl	8004b40 <_malloc_usable_size_r>
 8004ad0:	4284      	cmp	r4, r0
 8004ad2:	4607      	mov	r7, r0
 8004ad4:	d802      	bhi.n	8004adc <_realloc_r+0x34>
 8004ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ada:	d812      	bhi.n	8004b02 <_realloc_r+0x5a>
 8004adc:	4621      	mov	r1, r4
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f7ff ff6e 	bl	80049c0 <_malloc_r>
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d0ed      	beq.n	8004ac6 <_realloc_r+0x1e>
 8004aea:	42bc      	cmp	r4, r7
 8004aec:	4622      	mov	r2, r4
 8004aee:	4631      	mov	r1, r6
 8004af0:	bf28      	it	cs
 8004af2:	463a      	movcs	r2, r7
 8004af4:	f7ff fed0 	bl	8004898 <memcpy>
 8004af8:	4631      	mov	r1, r6
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fef4 	bl	80048e8 <_free_r>
 8004b00:	e7e1      	b.n	8004ac6 <_realloc_r+0x1e>
 8004b02:	4635      	mov	r5, r6
 8004b04:	e7df      	b.n	8004ac6 <_realloc_r+0x1e>
	...

08004b08 <_sbrk_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_sbrk_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f7fc faa4 	bl	8001060 <_sbrk>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_sbrk_r+0x1a>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_sbrk_r+0x1a>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	2000098c 	.word	0x2000098c

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f000 b811 	b.w	8004b50 <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	20000990 	.word	0x20000990

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f000 b80c 	b.w	8004b52 <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	20000990 	.word	0x20000990

08004b40 <_malloc_usable_size_r>:
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f18      	subs	r0, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfbc      	itt	lt
 8004b4a:	580b      	ldrlt	r3, [r1, r0]
 8004b4c:	18c0      	addlt	r0, r0, r3
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_acquire_recursive>:
 8004b50:	4770      	bx	lr

08004b52 <__retarget_lock_release_recursive>:
 8004b52:	4770      	bx	lr

08004b54 <_init>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr

08004b60 <_fini>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr
